using System.Reflection.Metadata;
using System.Runtime.InteropServices;
using System.Text;
using Sandbox.Assignments;
using Sandbox.DataStructures;
using Sandbox.Enums;
using Sandbox.Solutions.Easy;
using Sandbox.Solutions.Hard;
using Sandbox.Solutions.Medium;
using Sandbox.Topics.Sorting;
using Sandbox.Topics.Trees;

{
    //CopyListWithRandomPointer
    //var head = new Node(7);

    //var node13 = new Node(13);

    //var node11 = new Node(11);

    //var node10 = new Node(10);

    //var node1 = new Node(1);
    //head.next = node13;

    //node13.next = node11;
    //node13.random = head;

    //node11.next = node10;
    //node11.random = node1;

    //node10.next = node1;
    //node10.random = node11;

    //node1.random = head;

    //var solution = new CopyListWithRandomPointer();

    //var sol = solution.CopyRandomList(head);
    ;
}

{
    //Remove k digits
    //var num = "1432219";
    //var k = 3;
    //var sol = new RemoveKDigits();
    //var res = sol.RemoveKdigits(num, k);
    //Console.WriteLine(res);

    //num = "10200";
    //k = 1;
    //res = sol.RemoveKdigits(num, k);
    //Console.WriteLine(res);

    //num = "112";
    //k = 1;
    //res = sol.RemoveKdigits(num, k);
    //Console.WriteLine(res);

    //num = "123456";
    //k = 3;
    //res = sol.RemoveKdigits(num, k);
    //Console.WriteLine(res);

    //num =
    //    "111111111111111111111111111111111111111111111111111111111111111" +
    //    "1111111111111111111111111111111111111111111111111111111111111111111" +
    //    "11111111111111111111111111111111111111111111111111111111111111111111111" +
    //    "11111111111111111111111111111111111111111111111111111111111111111111111111" +
    //    "11111111111111111111111111111111111111111111111111111111111111111111111111" +
    //    "11111111111111111111111111111111111111111111111111111111111111111111111111" +

    //    "2222222222222222222222222222222222222222222222222222222222222222222222";
    //k = 50000;
    //res = sol.RemoveKdigits(num, k);
    //Console.WriteLine(res);

    //num = "10";
    //k = 2;
    //res = sol.RemoveKdigits(num, k);
    //Console.WriteLine(res);
}

{
    ////Binary Tree Zigzag Level Order Traversal
    //var a = new BinaryTreeZigzagLevelOrderTraversal();
    //var node4 = new TreeNode(4);
    //var node8 = new TreeNode(8);
    //var node14 = new TreeNode(14);
    //var node15 = new TreeNode(15, node4, node8);
    //var node7 = new TreeNode(7, null, node14);
    //var node20 = new TreeNode(20, node15, node7);
    //var node9 = new TreeNode(9);
    //var root = new TreeNode(3, node9, node20);
    //var sol = a.ZigzagLevelOrder(root);
    //sol = a.ZigzagLevelOrder(null);
}

{
    ////https://leetcode.com/problems/spiral-matrix/
    //var spiral = new int[][]
    //{
    //    new[] { 1, 2, 3, 4 },
    //    new[] { 5, 6, 7, 8 },
    //    new[] { 9, 10, 11, 12 },
    //};

    //var sol = new SpiralMatrix();
    //sol.SpiralOrder(spiral);

    //spiral = new[]
    //{
    //    new[] { 1 }
    //};

    //sol.SpiralOrder(spiral);
}

//{
//    //https://leetcode.com/problems/merge-sorted-array/
//    var array1 = new int[] { 1, 2, 3, 0, 0, 0 };
//    var m = 3;
//    var array2 = new int[] { 2, 5, 6 };
//    var n = 3;
//    var sol = new MergeSortedArray();
//    //sol.Merge(array1, m, array2, n);

//    array1 = new int[] { 0 };
//    m = 0;
//    array2 = new int[] { 1 };
//    n = 1;
//    //sol.Merge(array1, m, array2, n);

//    array1 = new int[] { 4, 5, 6, 0, 0, 0 };
//    m = 3;
//    array2 = new int[] { 1, 2, 3 };
//    n = 3;
//    sol.Merge(array1, m, array2, n);

//    array1 = new int[] { 0, 0, 0, 0, 0};
//    m = 0;
//    array2 = new int[] { 1, 2, 3, 4, 5 };
//    n = 5;
//    sol.Merge(array1, m, array2, n);
//}

{
    //https://leetcode.com/problems/number-of-islands/
    //var arr = new char[][]
    //{
    //    new[] { '1', '1', '1', '1', '0' },
    //    new[] { '1', '1', '0', '1', '0' },
    //    new[] { '1', '1', '0', '0', '0' },
    //    new[] { '0', '0', '0', '0', '0' }
    //};

    //var sol = new NumberOfIslands();
    //sol.NumIslands(arr);

    //arr = new char[][]
    //{
    //    new[] {'1', '1', '0', '0', '0'},
    //    new[] {'1', '1', '0', '0', '0'},
    //    new[] {'0', '0', '1', '0', '0'},
    //    new[] {'0', '0', '0', '1', '1'}
    //};
    //sol.NumIslands(arr);

    //arr = new char[][]
    //{
    //    new[] { '1' },
    //    new[] { '0' },
    //    new[] { '1' }
    //};
    //sol.NumIslands(arr);

    //arr = new char[][]
    //{
    //    new[] { '1', '1' }
    //};

    //sol.NumIslands(arr);
}

{
    //https://leetcode.com/problems/add-two-numbers-ii/
    //reverse linked lists and just do some summing
    //save in stack nodes the return the final sum

    //var l1 = new ListNode(9,
    //    new ListNode(9,
    //        new ListNode(9,
    //            new ListNode(3))));
    //var l2 = new ListNode(5,
    //    new ListNode(6,
    //        new ListNode(4)));

    //var sol = new AddTwoNumbers2();
    ////sol.AddTwoNumbers(l1, l2);

    //l1 = new ListNode(2, new ListNode(4, new ListNode(3)));
    //l2 = new ListNode(5, new ListNode(6, new ListNode(4)));
    //sol.AddTwoNumbers(l1, l2);
}

{
    //sort colors
    //https://leetcode.com/problems/sort-colors/

    //var arr = new int[] { 2, 0, 2, 1, 1, 0 };
    //var a = new SortColors();
    //a.Solution(arr);
}

{
    //rotate image
    //https://leetcode.com/problems/rotate-image/

    //var matrix = new []
    //{
    //    new int[] { 1, 2, 3 },
    //    new int[] { 4, 5, 6 },
    //    new int[] { 7, 8, 9 }
    //};

    //var sol = new RotateImage();
    ////sol.Rotate(matrix);

    //matrix = new[]
    //{
    //    new int[] { 5, 1, 9, 11 },
    //    new int[] { 2, 4, 8, 10 },
    //    new int[] { 13, 3, 6, 7 },
    //    new int[] {15, 14, 12, 16}
    //};

    //sol.Rotate(matrix);
}

{
    ////https://leetcode.com/problems/swap-nodes-in-pairs/
    //var l1 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4))));
    //var sol = new SwapNodesInPairs();
    //sol.SwapPairs(l1);
}

{
    //https://leetcode.com/problems/pacific-atlantic-water-flow/
    //var heights = new[]
    //{
    //    new [] { 1, 2, 2, 3, 5 },
    //    new [] { 3, 2, 3, 4, 4 },
    //    new [] { 2,4,5,3,1 },
    //    new [] { 6,7,1,4,5 },
    //    new [] {5,1,1,2,4 },

    //};
    //var sol = new PacificAtlanticWater();
    ////sol.PacificAtlantic(heights);

    //heights = new[]
    //{
    //    new[]
    //    {
    //        19, 16, 16, 12, 14, 0, 17, 11, 2, 0, 18, 9, 13, 16, 8, 8, 8, 13, 17, 9, 16, 9, 4, 7, 1, 19, 10, 7, 0, 15
    //    },
    //    new[] { 0, 11, 4, 14, 9, 0, 6, 13, 16, 5, 19, 9, 4, 5, 4, 12, 0, 13, 0, 7, 9, 12, 13, 15, 3, 7, 4, 9, 15, 1 },
    //    new[]
    //    {
    //        13, 14, 12, 12, 12, 16, 6, 15, 13, 1, 8, 9, 11, 14, 14, 10, 19, 11, 10, 0, 5, 18, 4, 12, 7, 13, 17, 15, 18,
    //        1
    //    },
    //    new[]
    //    {
    //        16, 14, 19, 5, 8, 2, 11, 17, 7, 1, 4, 6, 5, 18, 7, 15, 6, 19, 18, 12, 1, 14, 2, 2, 0, 9, 15, 14, 13, 19
    //    },
    //    new[]
    //    {
    //        17, 4, 12, 9, 12, 10, 12, 10, 4, 5, 12, 7, 2, 12, 18, 10, 10, 8, 6, 1, 5, 13, 10, 3, 5, 3, 11, 4, 8, 11
    //    },
    //    new[]
    //    {
    //        8, 19, 18, 9, 6, 2, 7, 3, 19, 6, 0, 17, 9, 12, 11, 1, 15, 11, 18, 1, 8, 11, 1, 11, 16, 7, 8, 17, 15, 0
    //    },
    //    new[] { 7, 0, 5, 11, 1, 7, 12, 18, 12, 1, 5, 2, 11, 7, 18, 12, 0, 11, 9, 18, 5, 2, 3, 1, 1, 1, 8, 14, 19, 5 },
    //    new[]
    //    {
    //        2, 14, 2, 16, 17, 19, 10, 16, 1, 16, 16, 3, 19, 12, 13, 17, 19, 12, 16, 10, 16, 8, 16, 12, 6, 12, 13, 17, 9,
    //        12
    //    },
    //    new[]
    //    {
    //        8, 1, 10, 5, 7, 0, 15, 19, 8, 15, 4, 12, 18, 18, 13, 11, 5, 2, 8, 3, 15, 4, 3, 7, 7, 14, 15, 11, 6, 16
    //    },
    //    new[]
    //    {
    //        0, 5, 13, 19, 1, 1, 2, 4, 16, 2, 16, 9, 15, 15, 10, 10, 18, 11, 17, 1, 5, 14, 5, 19, 7, 0, 13, 7, 13, 7
    //    },
    //    new[]
    //    {
    //        11, 6, 16, 12, 4, 2, 9, 11, 17, 19, 12, 10, 6, 16, 17, 5, 1, 18, 19, 7, 15, 1, 14, 0, 3, 19, 7, 3, 4, 13
    //    },
    //    new[] { 4, 11, 8, 10, 10, 19, 7, 18, 4, 2, 2, 14, 6, 9, 18, 14, 2, 16, 5, 3, 19, 17, 4, 3, 7, 1, 12, 2, 4, 3 },
    //    new[]
    //    {
    //        14, 16, 3, 11, 13, 13, 6, 16, 18, 0, 17, 19, 4, 1, 14, 12, 4, 17, 5, 19, 8, 13, 15, 3, 15, 4, 1, 14, 12, 10
    //    },
    //    new[]
    //    {
    //        13, 2, 12, 2, 16, 12, 19, 10, 19, 12, 19, 14, 12, 17, 16, 3, 13, 7, 3, 15, 16, 7, 10, 15, 14, 10, 6, 5, 2,
    //        18
    //    }
    //};

    //sol.PacificAtlantic(heights);
}

{
    //https://leetcode.com/problems/validate-binary-search-tree/
    //var l5 = new TreeNode(5, new TreeNode(1), new TreeNode(6, new TreeNode(3), new TreeNode(7)));
    //var sol = new ValidateBinarySearchTree();
    //sol.IsValidBST(l5);
}

{
    //https://leetcode.com/problems/longest-palindromic-substring/
    //var subs = "babad";
    //var sol = new LongestPalindrome();
    //sol.Sol(subs);

    //subs = "bxabax";
    //sol.Sol(subs);

    //subs = "aaaa";
    //sol.Sol(subs);

    //subs = "abbcccbbbcaaccbababcbcabca";
    //sol.Sol(subs);
}

{
    //https://leetcode.com/problems/binary-search-tree-iterator/
    //var root = new TreeNode(7,
    //    new TreeNode(3), new TreeNode(15, new TreeNode(9), new TreeNode(20)));

    ////should give O(1) time and O(H) memory, use stack to store left nodes, see class solution

    //BSTIterator obj = new BSTIterator(root);
    //Console.WriteLine(obj.Next());
    //Console.WriteLine(obj.Next());
    //Console.WriteLine(obj.HasNext());
    //Console.WriteLine(obj.Next());
    //Console.WriteLine(obj.HasNext());
    //Console.WriteLine(obj.Next());
    //Console.WriteLine(obj.HasNext());
    //Console.WriteLine(obj.Next());
    //Console.WriteLine(obj.HasNext());
}

{
    //https://leetcode.com/problems/word-search/

    //var matrix = new[]
    //{
    //    new[] { 'A', 'B', 'C', 'E' },
    //    new[] { 'S', 'F', 'E', 'S' },
    //    new[] { 'A', 'D', 'E', 'E' }
    //};

    //string word = "ABCESEEEFS";
    //var sol = new WordSearch();
    //sol.Exist(matrix, word);

    //matrix = new[]
    //{
    //    new[] { 'E' }
    //};

    //word = "E";

    //sol.Exist(matrix, word);
}

{
    //https://leetcode.com/problems/search-a-2d-matrix-ii/
    //one naive solution is to binary seach every row, that is O(m * log (n))
    //
    //another solution is to search where possibly the target could be
    //iterate first row of the minimal values and see if target number than current column value (because if it smaller, no reason to search in columns where value
    //is obviously bigger
    //same for the row, go down in first row and find first where value is bigger, than omit it

    //var matrix = new[]
    //{
    //    new int[] { 1, 4, 7, 11, 15 },
    //    new int[] { 2, 5, 8, 12, 19 },
    //    new int[] { 3, 6, 9, 16, 22 },
    //    new int[] { 10, 13, 14, 17, 24 },
    //    new int[] { 18, 21, 23, 26, 30 },
    //};

    //int target = 20;

    //var sol = new Search2DMatrix();
    //sol.SearchMatrix(matrix, target);
}

{
    //https://leetcode.com/problems/find-the-duplicate-number/
    int[] matrix =
    {
        3, 1, 3, 4, 2
    };

    var sol = new FindDuplicateNumber();
    //sol.FindDuplicate(matrix);

    //matrix = new [] { 1, 3, 4, 2, 2 };
    //sol.FindDuplicate(matrix);

    //matrix = new[] {1,5,6,2,3,4,6,7 };
    //sol.FindDuplicate(matrix);

    //matrix = new[] { 2, 5, 9, 6, 9, 3, 8, 9, 7, 1 };
    //sol.FindDuplicate(matrix);
}

{
    //https://leetcode.com/problems/letter-combinations-of-a-phone-number/

    //string ans = "235";
    //var sol = new LetterCombinationsOfAPhoneNumber();
    ////recursive
    ////sol.LetterCombinations(ans);

    ////iterative
    //sol.LetterCombinations(new StringBuilder(ans));
}

{
    //https://leetcode.com/problems/majority-element-ii/

    //var nums = new[] { 3, 2, 3 };
    //var sol = new MajorityElement2();
    //sol.MajorityElement(nums);

    //nums = new[] { 1, 1, 1, 1, 2, 3, 3, 3, 3 };
    //sol.MajorityElement(nums);

    //nums = new[] { 1, 2 };
    //sol.MajorityElement(nums);

    //nums = new[] { 2, 1, 1, 3, 1, 4, 5, 6 };
    //sol.MajorityElement(nums);
}

{
    //https://leetcode.com/problems/delete-node-in-a-bst/

    //var root = new TreeNode(5, new TreeNode(3, new TreeNode(2), new TreeNode(4)), new TreeNode(6, right: new TreeNode(7)));
    //root = new TreeNode(50, new TreeNode(30, right: new TreeNode(40)), new TreeNode(70, new TreeNode(60), new TreeNode(80)));
    //var sol = new DeleteNodeBST();
    //sol.DeleteNode(root, 50);
}

{
    //https://leetcode.com/problems/next-permutation/

    //int[] nums = { 1, 4, 5, 4, 4 };
    //var sol = new NextPermutation();
    //sol.NextPermutate(nums);
}

{
    //https://leetcode.com/problems/basic-calculator-ii/
    //var sol = new BasicCalculator2();
    //var s = "32 + 2  * 2";
    //s = "1-1+1";
    ////s = "0-2147483647";
    //sol.Calculate(s);
}

{
    //https://leetcode.com/problems/make-the-string-great/
    //var s = "abBAcC";
    //s = "leEeetcode";
    //var sol = new MakeTheStringGood();
    //sol.MakeGood(s);
}

{
    //https://leetcode.com/problems/coin-change/
    //var couns = new[] { 1, 2, 5 };
    //var amount = 11;
    //var sol = new CoinChange();
    //sol.CoinChangee(couns, amount);
}

{
    //https://leetcode.com/problems/reverse-linked-list-ii/
    //var root = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
    //int left = 1, right = 4;
    //var sol = new ReverseLinkedList2();
    //sol.ReverseBetween(root, left, right);

    //root = new ListNode(1);
    //left = 1; right = 1;
    //sol.ReverseBetween(root, left, right);
}

{
    //https://leetcode.com/problems/reverse-linked-list/
    //one idea is to save in stack all nodes
    //var root = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
    //var sol = new ReverseLinkedList();
    //sol.ReverseList(root);
}

{
    //https://leetcode.com/problems/minesweeper/
    //var board = new[]
    //{
    //    new char[] { 'E', 'E', 'E', 'E', 'E' },
    //    new char[] { 'E', 'E', 'M', 'E', 'E' },
    //    new char[] { 'E', 'E', 'E', 'E', 'E' },
    //    new char[] { 'E', 'E', 'E', 'E', 'E' }
    //};

    //var click = new int[] { 3, 0 };
    //var sol = new Minesweeper();
    //sol.UpdateBoard(board, click);

    //board = new[]
    //{
    //    new[] { 'E', 'E', 'M', 'E' }
    //};

    //click = new[] { 0, 3 };
    //sol.UpdateBoard(board, click);
}

{
    //https://leetcode.com/problems/group-anagrams/
    //var sol = new GroupAnagrams();
    //var strs = new[] { "eat", "tea", "tan", "ate", "nat", "bat" };
    //sol.GroupAnagramsSol(strs);
}

{
    //https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/
    //var root = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(3, new ListNode(4, new ListNode(4))))));
    //root = new ListNode(1, new ListNode(1, new ListNode(1, new ListNode(2, new ListNode(2)))));
    //root = new ListNode(0, new ListNode(0, new ListNode(0, new ListNode(0))));
    //root = new ListNode(0, new ListNode(1, new ListNode(2, new ListNode(2, new ListNode(3, new ListNode(4))))));
    //var sol = new RemoveDuplicatesFromSortedList2();
    //sol.DeleteDuplicates(root);
}

{
    //https://leetcode.com/problems/merge-nodes-in-between-zeros/
    //var root = new ListNode(0, new ListNode(3, new ListNode(1, new ListNode(0,
    //    new ListNode(4, new ListNode(5, new ListNode(2, new ListNode(0))))))));

    //var sol = new MergeNodesInBetweenZeros();
    //sol.MergeNodes(root);
}

{
    //https://leetcode.com/problems/search-in-rotated-sorted-array/
    //var nums = new int[] {4, 5, 6, 7, 0, 1, 2 };
    //int target = 0;

    //var sol = new SearchInRotatedSortedArray();
    //sol.Search(nums, target);
}

{
    //https://leetcode.com/problems/fruit-into-baskets/
    //boyer-moore majority vote with a triplet
    //var sol = new FruitIntoBaskets();
    //var array = new int[] { 1, 2, 3, 2, 2};
    //array = new int[] { 1, 1, 1, 2, 2, 2, 1, 3 };
    //array = new int[] { 3, 3, 3, 1, 2, 1, 1, 2, 3, 3, 4 };
    //array = new int[] { 1, 0, 1, 4, 1, 4, 1, 2, 3 };
    //array = new int[] { 1, 0, 1, 0, 0, 0, 4, 0, 4, 0, 2, 3 };
    //sol.TotalFruit(array);
}

{
    //https://leetcode.com/problems/product-of-array-except-self/
    //var array = new int[] { 1, 2, 3, 4 };
    //var sol = new ProductOfArrayExceptSelf();
    //sol.ProductExceptSelf(array);
}

{
    //https://leetcode.com/problems/populating-next-right-pointers-in-each-node/
    //var root = new NodeNext(1,
    //    new NodeNext(2,
    //        new NodeNext(4),
    //        new NodeNext(5)),
    //    new NodeNext(3,
    //        new NodeNext(6),
    //        new NodeNext(7)));

    //var sol = new PopulatingNextRightPointers();
    //sol.Connect(root);
}

{
    //https://leetcode.com/problems/course-schedule/
    //var sol = new CourseSchedule();
    //sol.CanFinish(3, new int[][] { new int[] { 2, 1 }, new int[] { 1, 0 } });
}

{
    //https://leetcode.com/problems/implement-trie-prefix-tree/
    //var trie = new Trie();
    //trie.Insert("apple");
    //trie.Search("apple");
    //trie.Search("app");
    //trie.StartsWith("app");
    //trie.Insert("app");
    //trie.Search("app");
}

{
    //https://leetcode.com/problems/game-of-life/solutions/
    //var gol = new GameOfLifeSolution();

    //var board = new[]
    //{
    //    new[] { 0, 1, 0 },
    //    new[] { 0, 0, 1 },
    //    new[] { 1, 1, 1 },
    //    new[] { 0, 0, 0 },
    //};

    //gol.GameOfLife(board);
}

{
    //https://leetcode.com/problems/longest-increasing-subsequence/
    //var sol = new LongestIncreasingSubsequence();
    //var nums = new int[] { 10, 9, 2, 5, 3, 7, 101, 18 };
    //sol.LengthOfLIS2(nums);
}

{
    //https://leetcode.com/problems/maximum-product-subarray/description/
    //var nums = new int[]
    //{
    //    2, 3, -2, 4
    //};

    //var sol = new MaximumProductSubarray();
    //sol.MaxProduct(nums);
}

{
    //https://leetcode.com/problems/perfect-squares/
    //int n = 12;
    //var sol = new PerfectSquares();
    //sol.NumSquares(n);
}

{
    //https://leetcode.com/problems/integer-to-roman/description/
    //int num = 13;
    //var sol = new IntegerToRoman();
    //sol.IntToRoman(num);
}

{
    //https://leetcode.com/problems/increasing-triplet-subsequence/
    // var nums = new int[] { 2, 0, 5, 4, 6 };
    // var sol = new IncreasingTripletSequence();
    // sol.IncreasingTriplet(nums);
}

{
    //https://leetcode.com/problems/kth-largest-element-in-an-array/description/
    // var nums = new int[] { 3, 2, 3, 1, 2, 4, 5, 1, 6 };
    // int k = 4;
    // var sol = new KthLargestElementInAnArray();
    // sol.FindKthLargest(nums, k);
}

{
    //https://leetcode.com/problems/top-k-frequent-elements/description/
    // var nums = new int[] { 3, 2, 3, 1, 2, 4, 5, 1, 6 };
    // int k = 3;
    // var sol = new TopKFrequentElements();
    // sol.TopKFrequentUsingQuickselect(nums, k);
}

{
    //https://leetcode.com/problems/longest-consecutive-sequence/description/

    // int[] nums = new[] { 100, 4, 200, 1, 3, 2 };
    // var sol = new LongestConsecutineSequence();
    // sol.LongestConsecutive2(nums);
}

{
    // https://leetcode.com/problems/valid-parentheses/
    // var a = "()[]{}";
    // var sol = new ValidParentheses();
    // sol.IsValid(a);
}

{
    // https://leetcode.com/problems/min-stack/description/

    // MinStack obj = new MinStack();
    // *obj.Push(val);
    // *obj.Pop();
    // *int param_3 = obj.Top();
    // *int param_4 = obj.GetMin();
}

{   // https://leetcode.com/problems/evaluate-reverse-polish-notation/
    // var tokens = new string[] { "2", "1", "+", "3", "*" };
    // var sol = new EvaluateReversePolishNotation();
    // sol.EvalRPN(tokens);
}

{
    // // https://leetcode.com/problems/generate-parentheses/
    // var n = 3;
    // var sol = new GenerateParanthesesAnotherTry();
    // sol.GenerateParenthesis(n);

    // n = 5;
    // sol.GenerateParenthesis(n);
}

{
    // https://leetcode.com/problems/daily-temperatures/
    //var T = new int[] { 73, 74, 75, 71, 69, 72, 76, 73 };
    //var sol = new DailyTemperatures();
    //sol.DailyTemperatures2(T);
}

{
    // https://leetcode.com/problems/car-fleet/
    //var target = 12;
    //var position = new int[] { 10, 8, 0, 5, 3 };
    //var speed = new int[] { 2, 4, 1, 1, 3 };
    //var sol = new CarFleet();
    //sol.CarFleet2(target, position, speed);
}

{
    // https://leetcode.com/problems/valid-palindrome/description/
    // var sol = new ValidPalindrome();
    // sol.IsPalindrome(",,,,,,,,,,,,acva");
}

{
    // https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/
    // var sol = new TwoSum2InputArrayIsSorted();
    // sol.TwoSum(new int[] { 2, 7, 11, 15 }, 9);
}

{
    // var sol = new _3Sum();
    // sol.ThreeSum(new[] { -1, 0, 1, 2, -1, -4, -2, -3, 3, 0, 4 });
}

{
    // var sol = new ContainerWithMostWater();
    // sol.MaxArea(new int[] { 1, 8, 6, 2, 5, 4, 8, 3, 7 });
}

{
    // https://leetcode.com/problems/trapping-rain-water/
    // var sol = new TrappingRainWater();
    // sol.Trap2(new int[] { 4, 2, 0, 3, 2, 5 });
}

{
    // https://leetcode.com/problems/binary-search/description/
    // var sol = new BinarySearch();
    // sol.Search(new int[] { -1, 0, 3, 5, 9, 12 }, 6);
}

{
    // https://leetcode.com/problems/search-a-2d-matrix/
    // var sol = new SearchA2DMatrix();
    // sol.SearchMatrix(new[]
    // {
    //     new[] { 1, 3 },
    // }, 3);
}

{
    // https://leetcode.com/problems/koko-eating-bananas/
    // var sol = new KokoEatingBananas();
    // sol.MinEatingSpeed(new[] { 3, 6, 7, 11 }, 8);
}

{
    // https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/description/

    // var sol = new CapacityToShipPackagesWithinDDays();
    // sol.ShipWithinDays(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 5);
}

{
    // https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
    // var sol = new FindMinimumInRotatedArray();
    // sol.FindMin(new int[] { 1000, 1002, 1003, 999 });
}

{
    // https://leetcode.com/problems/search-in-rotated-sorted-array/description/
    // var sol = new SearchInRotatedSortedArray2();
    // sol.Search(new int[] { 5, 1, 2, 3, 4 }, 1);
}

{
    // https://leetcode.com/problems/time-based-key-value-store
    // [[],["a","bar",1],["x","b",3],["b",3],["foo","bar2",4],["foo",4],["foo",5]]
    // var map = new TimeBasedKeyValueStore();
    // map.Set("a", "bar", 1);
    // map.Set("x", "b", 3);
    // map.Get("b", 3);
    // map.Set("foo", "bar2", 4);
    // map.Get("foo", 4);
    // map.Get("foo", 5);
}

{
    // https://leetcode.com/problems/reverse-linked-list/
    // var sol = new ReverseLinkedListEasy();
    // sol.ReverseList(new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5))))));
}

{
    // https://leetcode.com/problems/merge-two-sorted-lists/
    //var sol = new MergeTwoSortedLists();
    //sol.MergeTwoLists(new ListNode(1, new ListNode(2, new ListNode(4))),
    //    new ListNode(1, new ListNode(3, new ListNode(4))));
}

{
    // https://leetcode.com/problems/reorder-list/description/

    //var sol = new ReorderList();
    //sol.ReorderListSolution2(new ListNode(1, new ListNode(2)));
}

{
    // https://leetcode.com/problems/remove-nth-node-from-end-of-list/
    //var sol = new RemoveNthNodeFromEndOfList();
    //sol.RemoveNthFromEnd(new ListNode(1), 1);
}

{
    // https://leetcode.com/problems/linked-list-cycle/description/
}

{
    // https://leetcode.com/problems/add-two-numbers/description/
    //var sol = new AddTwoNumbers();
    //sol.AddTwoNumbersSolution(new ListNode(2, new ListNode(4, new ListNode(3))),
    //    new ListNode(5, new ListNode(6, new ListNode(4))));
}

{
    // https://leetcode.com/problems/copy-list-with-random-pointer/
    // var sol = new CopyListWithRandomPointer2();
    //
    // var one = new Node(1);
    // var seven = new Node(7);
    // one.next = seven;
    // seven.random = one;
    //
    // sol.CopyRandomList(one);
}

{
    // https://leetcode.com/problems/find-the-duplicate-number/description/

    // var sol = new FindTheDuplicateNumber();
    // sol.FindDuplicate(new[] { 3, 1, 3, 4, 2 });
}

{
    // https://leetcode.com/problems/lru-cache/
    // var lruCache = new LRUCache(2);
    //lruCache.Put(2, 1);
    //lruCache.Put(2, 2);
    //lruCache.Get(2);    // return 1
    //lruCache.Put(1, 1); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
    //lruCache.Put(4, 1); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
    //lruCache.Get(2);    // return -1 (not found)
}

{
    // https://leetcode.com/problems/merge-k-sorted-lists/
    // var sol = new MergeKSortedLists();
    //sol.MergeKLists(new[]
    //{
    //    new ListNode(1, new ListNode(2, new ListNode(2))),
    //    new ListNode(1, new ListNode(1, new ListNode(2))),
    //});
}

{
    // https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
    //var sol = new BestTimeToBuyAndSellStock();
    //sol.MaxProfit(new int[] { 7, 1, 5, 3, 6, 4 });
}

{
    // https://leetcode.com/problems/longest-substring-without-repeating-characters/
    //var sol = new LongestSubstringWithoutRepeatingCharacters();
    //sol.LengthOfLongestSubstring("a");
}

{
    // https://leetcode.com/problems/longest-repeating-character-replacement/
    //var sol = new LongestRepeatingCharacterReplacement();
    //sol.CharacterReplacement("AABABAAAA", 1);
}

{
    // https://leetcode.com/problems/permutation-in-string/
    // var sol = new PermutationInString();
    // sol.CheckInclusion("ab", "eidbaooo");
}

{
    // https://leetcode.com/problems/sliding-window-maximum/
    //var sol = new SlidingWindowMaximum();
    //sol.MaxSlidingWindow(new[] { -7, -8, 7, 5, 7, 1, 6, 0 }, 4);
}
{
    // https://leetcode.com/problems/minimum-window-substring/
    //var sol = new MinimumWindowSubstring();
    //sol.MinWindow("BANNCBEODEBANC", "ABC");
}

{
    // https://leetcode.com/problems/invert-binary-tree/description/
}

{
    // https://leetcode.com/problems/maximum-depth-of-binary-tree/
}

{
    // https://leetcode.com/problems/maximum-depth-of-binary-tree/description/
}

{
    // https://leetcode.com/problems/diameter-of-binary-tree/
}

{
    // https://leetcode.com/problems/balanced-binary-tree/
    //var sol = new BalancedBinaryTree();

    //var root = new TreeNode(1,
    //    new TreeNode(2, new TreeNode(3, new TreeNode(4))),
    //    new TreeNode(2, null, new TreeNode(3, null, new TreeNode(4))));

    //sol.IsBalanced(root);
}

{
    // https://leetcode.com/problems/same-tree/
}

{
    // https://leetcode.com/problems/subtree-of-another-tree/
    //var sol = new SubtreeOfAnotherTree();
    //var subRoot = new TreeNode(4, new TreeNode(1, null, new TreeNode(2)));
    //sol.IsSubtree(new TreeNode(3, new TreeNode(4, new TreeNode(1), new TreeNode(2)), new TreeNode(5)), subRoot);
}

{
    // https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
}

{
    // https://leetcode.com/problems/binary-tree-level-order-traversal/
}

{
    // https://leetcode.com/problems/binary-tree-right-side-view/
    //var sol = new BinaryTreeRightSideView();
    //sol.RightSideView(new TreeNode(1, new TreeNode(2, null, new TreeNode(5)), new TreeNode(3)));
}

{
    // https://leetcode.com/problems/count-good-nodes-in-binary-tree/
}

{
    // https://leetcode.com/problems/validate-binary-search-tree/
    //var sol = new ValidateTheBinarySearchTree();
    //sol.IsValidBST(new TreeNode(2, new TreeNode(1), new TreeNode(3)));
}

{
    // https://leetcode.com/problems/kth-smallest-element-in-a-bst/
    //var sol = new KthSmallestElementinaBST();
    //sol.KthSmallest(new TreeNode(3, new TreeNode(1, null, new TreeNode(2)), new TreeNode(4)), 1);
}

{
    // https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
}

{
    // https://leetcode.com/problems/binary-tree-maximum-path-sum/
}

{
    // https://leetcode.com/problems/serialize-and-deserialize-binary-tree/
    //var sol = new SerializeandDeserializeBinaryTree();
    //var data = sol.serialize(new TreeNode(1, new TreeNode(2), new TreeNode(3, new TreeNode(4), new TreeNode(5))));
    //Console.WriteLine(data);
    //Console.WriteLine(sol.deserialize("[]"));
}

{
    // https://leetcode.com/problems/kth-largest-element-in-a-stream/
    //var sol = new KthLargestElementinaStream(3, new[] { 4, 5, 8, 2 });

    //sol.Add(3);
    //sol.Add(5);
    //sol.Add(10);
    //sol.Add(9);
}

{
    // https://leetcode.com/problems/last-stone-weight/
}

{
    // https://leetcode.com/problems/k-closest-points-to-origin/
}

{
    // https://leetcode.com/problems/kth-largest-element-in-an-array/
}

{
    // https://leetcode.com/problems/task-scheduler/
    // var sol = new Sandbox.Solutions.Medium.TaskScheduler();
    // sol.LeastInterval(new[] { 'A', 'A', 'A', 'B', 'B', 'B' }, 2);
}

{
    // https://leetcode.com/problems/design-twitter/description/
    //Twitter twitter = new Twitter();
    //twitter.PostTweet(1, 5); // User 1 posts a new tweet (id = 5).
    //twitter.GetNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
    //twitter.Follow(1, 2);    // User 1 follows user 2.
    //twitter.PostTweet(2, 6); // User 2 posts a new tweet (id = 6).
    //twitter.GetNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
    //twitter.Unfollow(1, 2);  // User 1 unfollows user 2.
    //twitter.GetNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.
}

{
    // https://leetcode.com/problems/find-median-from-data-stream/description/
    //var sol = new MedianFinder();
    //sol.AddNum(1);
    //sol.AddNum(2);
    //sol.FindMedian();
    //sol.AddNum(3);
    //sol.FindMedian();
}

{
    // https://leetcode.com/problems/implement-trie-prefix-tree/description/
}

{
    // https://leetcode.com/problems/design-add-and-search-words-data-structure/description/
    //var wordDictionary = new WordDictionary();
    //wordDictionary.AddWord("bad");
    //wordDictionary.AddWord("dad");
    //wordDictionary.AddWord("mad");
    //wordDictionary.Search("pad"); // return False
    //wordDictionary.Search("bad"); // return True
    //wordDictionary.Search(".ad"); // return True
    //wordDictionary.Search("b.."); // return True
}

{
    // https://leetcode.com/problems/word-search-ii/
    var sol = new WordSearch2();
    // var board = new char[][]
    // {
    //     new char[] { 'o', 'a', 'a', 'n' },
    //     new char[] { 'e', 't', 'a', 'e' },
    //     new char[] { 'i', 'h', 'k', 'r' },
    //     new char[] { 'i', 'f', 'l', 'v' }
    // };
    //
    // var words = new string[] { "oath", "oathmeal", "eat", "rain" };

    // var board = new char[][]
    // {
    //     new char[] { 'a', 'a' },
    // };
    //
    // var words = new string[] { "aa", "a" };
    //
    // var board = new char[][]
    // {
    //     new char[] { 'a', 'b' },
    // };
    //
    // var words = new string[] { "ba" };
    // char[][] board = new char[][]
    // {
    //     new char[] { 'a', 'b', 'c', 'e' },
    //     new char[] { 'x', 'x', 'c', 'd' },
    //     new char[] { 'x', 'x', 'b', 'a' }
    // };
    //
    // var words = new string[] { "abc", "abcd" };

    //char[][] board = new char[][]
    //{
    //    new char[] { 'a', 'a' },
    //    new char[] { 'a', 'a' },
    //};

    //var words = new string[] { "aaaaa" };

    //sol.FindWords(board, words);
}

{
    // https://leetcode.com/problems/subsets/
    // var sol = new SubsetsSolution();
    // sol.Subsets(new int[] { 1, 2, 3 });
}

{
    // https://leetcode.com/problems/subsets-ii/
    //var sol = new Subsets2();
    //sol.SubsetsWithDup(new int[] { 1, 2, 2 });
}

{
    // https://leetcode.com/problems/combination-sum/description/
    //var sol = new CombinationSumSolution();
    //sol.CombinationSum(new[] { 2, 3, 6, 7 }, 7);
}

{
    // https://leetcode.com/problems/permutations/description/
    //var sol = new Permutations();
    //sol.Permute(new[] { 1, 2, 3 });
}

{
    // https://leetcode.com/problems/combination-sum-ii/description/
}

{
    // https://leetcode.com/problems/word-search/description/
    // var sol = new WordSearchSolution();
    // char[][] board = new char[][]
    // {
    //     new char[] { 'A', 'B', 'C', 'E' },
    //     new char[] { 'S', 'F', 'C', 'S' },
    //     new char[] { 'A', 'D', 'E', 'E' }
    // };
    //
    // sol.Exist(board, "SEE");
}
{
    // https://leetcode.com/problems/palindrome-partitioning/description/
    //var sol = new PalindromePartitioning();
    //sol.Partition("aabb");
}

{
    // https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/
    // var sol = new LetterCombinationsOfaPhoneNumberSolution();
    // sol.LetterCombinations("23");
}

{
    // https://leetcode.com/problems/n-queens/description/
    //var sol = new NQueens();
    //sol.SolveNQueens(1);
}

{
    // https://leetcode.com/problems/climbing-stairs/description/
}

{
    // https://leetcode.com/problems/min-cost-climbing-stairs/description/
    //var sol = new MinCostClimbingStairsSolution();
    //sol.MinCostClimbingStairs(new int[] { 1, 100, 1, 1, 1, 100, 1, 1, 100, 1 });
}

{
    // https://leetcode.com/problems/house-robber/description/
}

{
    // https://leetcode.com/problems/house-robber2/description/
}

{
    // https://leetcode.com/problems/longest-palindromic-substring/
    //var sol = new LongestPalindromicSubstring();
    //sol.LongestPalindrome("bb");
}

{
    // https://leetcode.com/problems/palindromic-substrings/description/
    //var sol = new PalindromicSubstrings();
    //sol.CountSubstrings("aaa");
}

{
    // https://leetcode.com/problems/decode-ways/
    //var sol = new DecodeWays();
    //sol.NumDecodings("226226");
}

{
    // https://leetcode.com/problems/coin-change/description/
    //var sol = new CoinChangeSol();
    //sol.CoinChange(new[] { 1, 2, 5 }, 11);
}

{
    // https://leetcode.com/problems/maximum-product-subarray/
    //var sol = new MaximumProductSubarraySolution();
    //sol.MaxProduct(new int[] { -2, 0, -1 });
}

{
    // https://leetcode.com/problems/word-break/description/
    //var sol = new WordBreakSolution();
    //sol.WordBreak("leetcode", new List<string> { "leet", "code" });
}

{
    // https://leetcode.com/problems/longest-increasing-subsequence/description/
    //var sol = new LongestIncreasingSubsequenceSolution();
    //sol.LengthOfLIS_BinarySearch(new int[] { 3, 5, 6, 2, 5, 4, 19, 5, 6, 7, 12 });
}

{
    // https://leetcode.com/problems/partition-equal-subset-sum/description/
    //var sol = new PartitionEqualSubsetSum();
    //sol.CanPartition(new[] { 1, 5, 11, 5 });
}

{
    // https://leetcode.com/problems/number-of-islands/description/
    //char[][] grid = new char[][]
    //{
    //    new char[] { '1', '1', '0', '0', '0' },
    //    new char[] { '1', '1', '0', '0', '0' },
    //    new char[] { '0', '0', '1', '0', '0' },
    //    new char[] { '0', '0', '0', '1', '1' }
    //};

    //var sol = new NumberOfIslandsSolution();
    //sol.NumIslands(grid);
}

{
    // https://leetcode.com/problems/clone-graph/description/
    //var sol = new CloneGraphSolution();
    //var node1 = new GraphNode(1);
    //var node2 = new GraphNode(2);
    //var node3 = new GraphNode(3);
    //var node4 = new GraphNode(4);

    //node1.neighbors = new List<GraphNode> { node2, node4 };
    //node2.neighbors = new List<GraphNode> { node1, node3 };
    //node3.neighbors = new List<GraphNode> { node2, node4 };
    //node4.neighbors = new List<GraphNode> { node1, node3 };
    //sol.CloneGraph(node1);
}

{
    // https://leetcode.com/problems/max-area-of-island/description/
    var grid = new[]
    {
        new [] {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
        new [] {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
        new [] {0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        new [] {0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
        new [] {0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0},
        new [] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
        new [] {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
        new [] {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}
    };

    var sol = new MaxAreaOfIslands();
    sol.MaxAreaOfIsland(grid);
}

{
    // https://leetcode.com/problems/pacific-atlantic-water-flow/description/
    // int[][] heights = {
    //     new[] {1, 2, 2, 3, 5},
    //     new[] {3, 2, 3, 4, 4},
    //     new[] {2, 4, 5, 3, 1},
    //     new[] {6, 7, 1, 4, 5},
    //     new[] {5, 1, 1, 2, 4}
    // };

    //int[][] heights = {
    //    new[] {1, 1},
    //    new[] {1, 1},
    //    new[] {1, 1},
    //};

    //var sol = new PacificAtlanticWaterFlow();
    //sol.PacificAtlantic(heights);
}

{
    // https://leetcode.com/problems/surrounded-regions/description/
    //char[][] charArray = new char[][]
    //{
    //    new char[] { 'X', 'X', 'X', 'X' },
    //    new char[] { 'X', 'O', 'O', 'X' },
    //    new char[] { 'X', 'X', 'O', 'X' },
    //    new char[] { 'X', 'X', 'O', 'X' }
    //};
    //var sol = new SurroundedRegions();
    //sol.Solve(charArray);
}

{
    // https://leetcode.com/problems/rotting-oranges/description/
    //int[][] grid = new int[][]
    //{
    //    new int[] {2, 1, 1},
    //    new int[] {1, 1, 0},
    //    new int[] {0, 1, 1}
    //};

    //var sol = new RottingOranges();
    //sol.OrangesRotting(grid);
}

{
    // https://leetcode.com/problems/course-schedule/
    //var sol = new CourseScheduleSolution();
    //sol.CanFinish(4, new[] { new[] { 2, 0 }, new[] { 1, 0 }, new[] { 3, 1 }, new[] { 3, 2 }, new[] { 1, 3 } });
}

{
    // https://leetcode.com/problems/course-schedule-ii/description/
    //var sol = new CourseSchedule2();
    //sol.FindOrder(8, new[] { new int[] { 1, 0 }, new int[] { 2, 6 }, new int[] { 1, 7 }, new int[] { 6, 4 }, new int[] { 7, 0 }, new int[] { 0, 5 }, });
}

{
    // https://leetcode.com/problems/redundant-connection/description/
    //var sol = new RedundantConnection();
    //sol.FindRedundantConnectionUnionFind(new[] { new[] { 1, 2 }, new[] { 2, 3 }, new[] { 3, 4 }, new[] { 1, 4 }, new[] { 1, 5 }, });
}

{
    // https://leetcode.com/problems/word-ladder/description/
    //var sol = new WordLadder();
    //sol.LadderLength("hit", "cog", new List<string> { "hot", "dot", "dog", "lot", "log", "cog" });
}

{
    // https://leetcode.com/problems/insert-interval/description/
    //var sol = new InsertInterval();
    //sol.Insert(new[] { new[] { 2, 3 }, new[] { 4, 5 }, new[] { 6, 7 }, new[] { 8, 10 }, new[] { 13, 16 }, },
    //    new[] { 4, 8 });
}

{
    //var sol = new MergeIntervals();
    //sol.Merge(new[] { new[] { 1, 4 }, new[] { 0, 4 }, });
}

{
    // https://leetcode.com/problems/non-overlapping-intervals/description/
    //var sol = new NonOverlappingIntervals();
    //sol.EraseOverlapIntervals(new[] { new[] { 1, 2 }, new[] { 2, 3 }, new[] { 3, 4 }, new[] { 1, 3 } });
}

{
    // https://leetcode.com/problems/minimum-interval-to-include-each-query/description/
    //var sol = new MinimumIntervalToIncludeEachQuery();
    //sol.MinInterval(new[] { new[] { 6, 6 }, new[] { 5, 5 }, new[] { 10, 10 }, new[] { 3, 6 }, new[] { 9, 9 } }, new[] { 7, 9, 2, 4, 5 });
}

{
    // https://leetcode.com/problems/maximum-subarray/description/
}

{
    // https://leetcode.com/problems/jump-game/description/
}

{
    // https://leetcode.com/problems/jump-game-ii/description/
    //var sol = new JumpGame2();
    //sol.Jump(new int[] { 2, 3, 1, 4, 4, 0, 0, 0, 1, 1, 0 });
}

{
    // https://leetcode.com/problems/gas-station/
    //var sol = new GasStation();
    //sol.CanCompleteCircuit(new int[] { 1, 2, 3, 4, 5 }, new[] { 3, 4, 5, 1, 2 });
}

{
    // https://leetcode.com/problems/hand-of-straights/description/
    //var sol = new HandOfStraights();
    //sol.IsNStraightHand(new[] { 1, 1, 2, 2, 3, 3 }, 2);
}

{
    // https://leetcode.com/problems/merge-triplets-to-form-target-triplet/description/
    //int[][] triplets = new int[][] { new int[] { 2, 5, 3 }, new int[] { 1, 8, 4 }, new int[] { 1, 7, 5 } };
    //int[] target = new int[] { 2, 7, 5 };

    //var sol = new MergeTripletsToFormTargetTriplet();
    //sol.MergeTriplets(triplets, target);
}

{
    // https://leetcode.com/problems/partition-labels/description/
    //var sol = new PartitionLabelss();
    //sol.PartitionLabels("ababcbacadefegdehijhklij");
}

{
    // https://leetcode.com/problems/valid-parenthesis-string/description/
}

{
    // https://leetcode.com/problems/unique-paths/description/
    //var sol = new UniquePathss();
    //sol.UniquePaths(3, 2);
}

{
    // https://leetcode.com/problems/longest-common-subsequence/description/
    //var sol = new LongestCommonSubsequence();
    //sol.LongestCommonSubsequenceSol("abcde", "ace");
}

{
    // https://leetcode.com/problems/coin-change-ii/
    //var sol = new CoinChange2();
    //sol.ChangeDpOptimizedSpace(6, new[] { 1, 2, 5 });
}

{
    // https://leetcode.com/problems/target-sum/
    //var sol = new TargetSum();
    //sol.FindTargetSumWaysDpOptimization(new[] { 1, 1, 1, 1, 1 }, 2);
}

{
    // https://leetcode.com/problems/interleaving-string/description/
    //var sol = new InterleavingString();
    //sol.IsInterleave("aabcc", "dbbca", "aadbbbaccc");
}

{
    // https://leetcode.com/problems/edit-distance/https://leetcode.com/problems/edit-distance/
    //var sol = new EditDistance();
    //sol.MinDistance("horse", "ros");
}

{
    // https://leetcode.com/problems/longest-increasing-path-in-a-matrix/description/
    //var sol = new LongestIncreasingPathinaMatrix();
    //int[][] matrix = new[] { new int[] { 9, 9, 4 }, new[] { 6, 6, 8 }, new[] { 2, 1, 1 } };
    ////matrix = new[] { new int[] { 1, 2 } };
    //sol.LongestIncreasingPath(matrix);
}

{
    // https://leetcode.com/problems/distinct-subsequences/description/
    //var sol = new DistinctSubsequences();
    //sol.NumDistinct("babgbag", "bag");
}

{
    // https://leetcode.com/problems/number-of-1-bits/description/
    //var sol = new NumberOf1Bits();
    //sol.HammingWeight(11);
}

{
    // https://leetcode.com/problems/regular-expression-matching/
    //var sol = new RegularExpressionMatching();
    //sol.IsMatch("accb", ".*");
    //sol.IsMatch("accb", ".*b");
    //sol.IsMatch("b", "a*b");
    //sol.IsMatch("a", ".*");
    //sol.IsMatch("aa", "a*");
}

{
    // https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/
    //var sol = new BestTimetoBuyandSellStockwithCooldown();
    //sol.MaxProfitOptimized(new int[] { 1 });
}

{
    // https://leetcode.com/problems/valid-parenthesis-string/description/
}

{
    // https://leetcode.com/problems/rotate-image/description/
    //var sol = new RotateImageSol();

    //int[][] matrix = new[] { new[] { 5, 1, 9, 11 }, new[] { 2, 4, 8, 10 }, new[] { 13, 3, 6, 7 }, new[] { 15, 14, 12, 16 } };

    //sol.Rotate(matrix);
}

{
    // https://leetcode.com/problems/min-cost-to-connect-all-points/description/
    var sol = new MinCostToConnectAllPoints();
    //sol.MinCostConnectPoints(new int[][]
    //{
    //    new int[] { 2, -3 },
    //    new int[] { -17, -8 },
    //    new int[] { 13, 8 },
    //    new int[] { -17, -15 },
    //});
}

{
    // https://leetcode.com/problems/network-delay-time/description/
    var sol = new NetworkDelayTime();
    //sol.NetworkDelayTimeSol(new int[][]
    //{
    //    new int[] { 1, 2, 4 },
    //    new int[] { 1, 3, 1 },
    //    new int[] { 3, 2, 2 },
    //    new int[] { 3, 4, 4 },
    //    new int[] { 2, 5, 4 },
    //    new int[] { 4, 5, 4 },
    //}, 5, 1);

    //sol.NetworkDelayTimeSol(new int[][]
    //{
    //    new int[] { 1, 2, 1 },
    //    new int[] { 2, 1, 3 },
    //}, 2, 2);
}

{
    // https://leetcode.com/problems/cheapest-flights-within-k-stops/description/
    //var sol = new CheapestFlightsWithingKStops();

    //sol.FindCheapestPriceBellmanFord(4, new int[][]
    //{
    //    new int[] { 0, 1, 1 },
    //    new int[] { 0, 2, 5 },
    //    new int[] { 1, 2, 1 },
    //    new int[] { 2, 3, 1 },
    //}, 0, 3, 1);

    //sol.FindCheapestPriceBellmanFord(11, new int[][]
    //{
    //    new int[] { 0, 3, 3 },
    //    new int[] { 3, 4, 3 },
    //    new int[] { 4, 1, 3 },
    //    new int[] { 0, 5, 1 },
    //    new int[] { 5, 1, 100 },
    //    new int[] { 0, 6, 2 },
    //    new int[] { 6, 1, 100 },
    //    new int[] { 0, 7, 1 },
    //    new int[] { 7, 8, 1 },
    //    new int[] { 8, 9, 1 },
    //    new int[] { 9, 1, 1 },
    //    new int[] { 1, 10, 1 },
    //    new int[] { 10, 2, 1 },
    //    new int[] { 1, 2, 100 }
    //}, 0, 2, 4);
}

{
    // https://leetcode.com/problems/minimum-size-subarray-sum
    //var sol = new MinimumSizeSubarraySum();
    //sol.MinSubArrayLen(7, new[] { 2, 3, 1, 2, 4, 3 });
}

{
    // https://leetcode.com/problems/simplify-path
    //var sol = new SimplifyPath();
    //sol.SimplifyPathSol("/a/./b/../../c/");
}

{
    // https://leetcode.com/problems/partition-list
    //var sol = new PartitionList();
    //sol.Partition(new ListNode(1, new ListNode(4, new ListNode(3, new ListNode(2, new ListNode(5, new ListNode(2)))))), 3);
}

{
    // https://leetcode.com/problems/h-index/
    //var sol = new HIndex();
    //sol.HIndexSol(new int[] { 3, 0, 6, 1, 5 });
}

{
    // https://leetcode.com/problems/insert-delete-getrandom-o1
}

{
    // https://leetcode.com/problems/reconstruct-itinerary/description/
    //var sol = new ReconstructItinerary();
    //sol.FindItinerary(new List<IList<string>>
    //{
    //    new List<string>
    //    {
    //        "JFK","SFO"
    //    },
    //    new List<string>
    //    {
    //        "JFK","ATL"
    //    },
    //    new List<string>
    //    {
    //        "SFO","ATL"
    //    },
    //    new List<string>
    //    {
    //        "ATL","JFK"
    //    },
    //    new List<string>
    //    {
    //        "ATL","SFO"
    //    },
    //});
}

{
    //var sol = new CheckifGridSatisfiesConditions();
    //sol.SatisfiesConditions(new int[][]
    //{
    //    new[] { 1, 0, 2 },
    //    new[] { 1, 0, 2 }
    //});
}

{
    //var sol = new MaximumPointsInsideTheSquare();
    //sol.MaxPointsInsideSquare(new int[][]
    //{
    //    new[] { 1, -1 }
    //}, "a");
}

{
    // https://leetcode.com/contest/biweekly-contest-130/problems/minimum-substring-partition-of-equal-character-frequency/
    //var sol = new MinimumSubstringPartitionofEqualCharacterFrequency();
    //sol.MinimumSubstringsInPartition("ababcc");
}

{
    // https://leetcode.com/problems/largest-divisible-subset/description/
    //var sol = new LargestDivisibleSubset();
    //sol.LargestDivisibleSubsetSol(new int[] { 5, 9, 18, 36 });
}

{
    // https://leetcode.com/problems/maximum-length-of-pair-chain/description/
    //var sol = new MaximumLengthofPairChain();
    //sol.FindLongestChain(new int[][]
    //{
    //    new int[]
    //    {
    //        1, 2
    //    },
    //    new int[]
    //    {
    //        2, 3
    //    },
    //    new int[]
    //    {
    //        3, 4
    //    },
    //    new int[]
    //    {
    //        4, 5
    //    },
    //    new int[]
    //    {
    //        7 ,9
    //    },
    //});
}

{
    // https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/
    //var sol = new NumberofLongestIncreasingSubsequence();
    //sol.FindNumberOfLIS(new int[] { 1, 3, 5, 4, 7 });
}

{
    //var sol = new DeleteAndEarn();
    //sol.DeleteAndEarnSol(new int[]
    //{
    //    1, 1, 1
    //});
}

{
    // https://leetcode.com/problems/longest-string-chain/description/
    //var sol = new LongestStringChain();
    //sol.LongestStrChain(new[] { "a", "b", "ba", "bca", "bda", "bdca" });
}

{
    // https://leetcode.com/problems/russian-doll-envelopes/description/
    var sol = new RussianDollEnvelopes();
    //sol.MaxEnvelopes(new int[][]
    //{
    //    new[] { 2, 100 },
    //    new[] { 3, 200 },
    //    new[] { 4, 300 },
    //    new[] { 5, 500 },
    //    new[] { 5, 400 },
    //    new[] { 5, 250 },
    //    new[] { 6, 370 },
    //    new[] { 6, 360 },
    //    new[] { 7, 380 },
    //});
    //sol.MaxEnvelopes(new int[][]
    //{
    //    new[] {15,8}, new[] {2,20}, new[] {2,14}, new[] {4,17},
    //    new[] {8,19}, new[] {8,9}, new[] {5,7}, new[] {11,19},
    //    new[] {8,11}, new[] {13,11}, new[] {2,13}, new[] {11,19},
    //    new[] {8,11}, new[] {13,11}, new[] {2,13}, new[] {11,19},
    //    new[] {16,1}, new[] {18,13}, new[] {14,17}, new[] {18,19}
    //});
}

{
    //var sol = new PartitionEqualSubsetSum();
    //sol.CanPartitionDp(new int[] { 1, 4, 4, 7 });
}

{
    // https://leetcode.com/problems/last-stone-weight-ii/description/
    //var sol = new LastStoneWeight2();
    ////sol.LastStoneWeightII(new[] { 1, 2 });
    //sol.LastStoneWeightIIDp(new int[] { 31, 26, 33, 21, 40 });
}

{
    // https://leetcode.com/problems/special-array-ii/description/
    //var sol = new SpecialArray2();
    //sol.IsArraySpecial(new[] { 4, 3, 1, 6 }, new[] { new[] { 0, 2 }, new[] { 2, 3 } });
}

{
    // https://leetcode.com/problems/sum-of-digit-differences-of-all-pairs/description/
    //var sol = new SumOfDigitDifferencesOfAllPairs();
    //sol.SumDigitDifferences(new int[] { 554, 528 });
}

{
    // https://leetcode.com/problems/combination-sum-iv/description/
    //var sol = new CombinationSum4();
    //sol.CombinationSum4Sol(new int[] { 1, 2, 3 }, 5);
}

{
    //var sol = new PartitiontoKEqualSumSubsets();
    //sol.CanPartitionKSubsets(new[] { 4, 3, 2, 3, 5, 2, 1 }, 4);
}

{
    // https://leetcode.com/problems/perfect-squares/description/
    //var sol = new PerfectSquaresSol();
    //sol.NumSquares(10000);
}

{
    // https://leetcode.com/problems/minimum-cost-for-tickets/description/
    //var sol = new MinimumCostForTickets();
    //sol.MincostTickets(new[] { 1, 4, 6, 7, 8, 20 }, new[] { 2, 7, 15 });
}

{
    // https://leetcode.com/problems/longest-arithmetic-subsequence/description/
    //var sol = new LongestArithmeticSubsequence();
    //sol.LongestArithSeqLength(new int[] { 44, 46, 22, 68, 45, 66, 43, 9, 37, 30, 50, 67, 32, 47, 44, 11, 15, 4, 11, 6, 20, 64, 54, 54, 61, 63, 23, 43, 3, 12, 51, 61, 16, 57, 14, 12, 55, 17, 18, 25, 19, 28, 45, 56, 29, 39, 52, 8, 1, 21, 17, 21, 23, 70, 51, 61, 21, 52, 25, 28 });
}

{
    // https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/
    //var sol = new LongestArithmeticSubsequenceofGivenDifference();
    //sol.LongestSubsequence(new int[] { 1, 5, 7, 8, 5, 3, 4, 2, 1 }, -2);
}

{
    // https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/description/
    //var sol = new MaximumProductofSplittedBinaryTree();
    //sol.MaxProduct(new TreeNode(1, null,
    //    new TreeNode(2, new TreeNode(3), new TreeNode(4, new TreeNode(5), new TreeNode(6)))));
}

{
    // https://leetcode.com/problems/matrix-block-sum/description/
    //var sol = new MatrixBlockSum();
    //sol.MatrixBlockSumSol(new int[][]
    //{
    //    new[] { 67, 64, 78 },
    //    new[] { 99, 98, 38 },
    //    new[] { 82, 46, 46 },
    //    new[] { 6,52,55 },
    //    new[] { 55,99,45 },
    //}, 1);
}

{
    // https://leetcode.com/problems/range-sum-query-2d-immutable/description/
}

{
    // https://leetcode.com/problems/dungeon-game/description/
    //var sol = new DungeonGame();
    //sol.CalculateMinimumHP(
    //    new int[][]
    //    {
    //        new[] { -2, -3, 3 },
    //        new[] { -5, -10, 1 },
    //        new []{10, 30, -5}
    //    });
}

{
    // https://leetcode.com/problems/triangle/description/
}

{
    // https://leetcode.com/problems/maximal-square/description/
    //var sol = new MaximumSquare();
    //sol.MaximalSquare(new[]
    //{
    //    new []{'0', '1'},
    //});
}

{
    // https://leetcode.com/problems/minimum-falling-path-sum/
    //var sol = new MinimumFallingPathSum();
    //sol.MinFallingPathSum(new int[][]
    //{
    //    new int[] { 2, 1, 3 },
    //    new int[] { 6, 5, 4 },
    //    new int[] { 7, 8, 9 },
    //});
}

{
    // delete and earn
    int DeleteAndEarn(int[] nums)
    {
        var dict = new Dictionary<int, int>(nums.Length);
        var max = 0;

        foreach (var num in nums)
        {
            if (dict.ContainsKey(num))
                dict[num] += num;
            else
                dict.Add(num, num);

            max = Math.Max(max, num);
        }

        var dp = new int[max + 1];
        dp[1] = dict.GetValueOrDefault(1, 0);

        for (var i = 2; i <= max; i++)
        {
            var cur = dict.GetValueOrDefault(i, 0);
            dp[i] = Math.Max(dp[i - 1], dp[i - 2] + cur);
        }

        return dp[max];
    }
}

{
    // combination sum 4
    int CombinationSum4(int[] nums, int target)
    {
        var dp = new int[target + 1];
        dp[0] = 1;

        for (var i = 1; i <= target; i++)
        {
            foreach (var num in nums)
            {
                if (num > i)
                    continue;

                dp[i] += dp[i - num];
            }
        }

        return dp[target];
    }
}

{
    // https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/
    //var sol = new CheckifThereisaValidPartitionForTheArray();
    //sol.ValidPartition(new int[] { 803201, 803201, 803201, 803201, 803202, 803203 });
}

{
    // https://leetcode.com/problems/next-greater-element-i/description/
    //var sol = new NextGreaterElement1();
    //sol.NextGreaterElement(new int[] { 4, 1, 2 }, new int[] { 1, 3, 4, 2 });
}

{
    // https://leetcode.com/problems/remove-k-digits/description/

    RemoveKdigits("1432219", 3);

    string RemoveKdigits(string num, int k)
    {
        if (num.Length <= k)
            return "0";

        if (k == 0)
            return num;

        var monoStack = new Stack<int>(k);

        for (var i = 0; i < num.Length; i++)
        {
            // here the operator is increasing, so it will generate the increasing order
            while (k > 0 && monoStack.Count > 0 && num[monoStack.Peek()] > num[i])
            {
                monoStack.Pop();
                k--;
            }

            // ignore leading zeros (if still in that for loop)
            if (monoStack.Count == 0 && num[i] == '0')
                continue;

            monoStack.Push(i);
        }

        // only increasing num "112"
        while (k > 0 && monoStack.Count > 0)
        {
            k--;
            monoStack.Pop();
        }

        var sb = new StringBuilder(monoStack.Count);

        // add another stack to reverse string
        var stack = new Stack<int>(monoStack.Count);

        while (monoStack.Count > 0)
            stack.Push(monoStack.Pop());

        while (stack.Count > 0)
        {
            var i = stack.Pop();
            sb.Append(num[i]);
        }

        return sb.Length == 0 ? "0" : sb.ToString();
    }
}

{
    // https://leetcode.com/problems/next-greater-element-ii/description/
    //var sol = new NextGreaterElement2();
    //sol.NextGreaterElements(new int[] { 1, 2, 2, 4, 3 });
}

{
    // https://leetcode.com/problems/next-greater-element-iii/description/
    //var sol = new NextGreaterElement3();
    //sol.NextGreaterElement(21);
}

{
    // https://leetcode.com/problems/daily-temperatures/description/
    //int[] temperatures = new int[] { 73, 74, 75, 71, 69, 72, 76, 73 };
    // the logic of monotonic stack is to keep in stack the biggest element UNTIL
    // a new biggest element is not found, here is actually a decreasing mono stack
    //var monoStack = new Stack<int>(temperatures.Length);

    //var greater = new int[temperatures.Length];

    //for (int i = 0; i < temperatures.Length; i++)
    //{
    //    while (monoStack.Count > 0 && temperatures[monoStack.Peek()] < temperatures[i])
    //    {
    //        var st = monoStack.Pop();
    //        greater[st] = i - st; // how far we've found the greater temperature
    //    }

    //    monoStack.Push(i);
    //}

    //return greater;
}

{
    // https://leetcode.com/problems/car-fleet/

    //var sol = CarFleet(17, new[] { 8, 12, 16, 11, 7 }, new[] { 6, 9, 10, 9, 7 });

    int CarFleet(int target, int[] position, int[] speed)
    {
        // we need strictly increasing monotonic stack
        // because we can merge cars together based on formula
        // (target - curPos) / speed
        // and if the new fleet value bigger or equal to top of stack (bigger means will get to destination slower), then merge them

        var monoStack = new Stack<(int, double)>(position.Length);
        var minHeap = new PriorityQueue<(int, double), int>(position.Length);

        for (int i = 0; i < position.Length; i++)
        {
            minHeap.Enqueue((position[i], speed[i]), position[i]);
        }

        var (firstFleetPos, firstFleetSpeed) = minHeap.Dequeue();
        monoStack.Push((firstFleetPos, firstFleetSpeed));

        while (minHeap.Count != 0)
        {
            var (currentPos, currentSpeed) = minHeap.Dequeue();

            while (monoStack.Count > 0 &&
                   EstimatedTimeOfArrival(monoStack.Peek().Item1, monoStack.Peek().Item2) <= EstimatedTimeOfArrival(currentPos, currentSpeed))
            {
                var (_, prevSpeed) = monoStack.Pop();
                var newSpeed = Math.Min(prevSpeed, currentSpeed);
                currentSpeed = newSpeed;
            }

            monoStack.Push((currentPos, currentSpeed));
        }

        return monoStack.Count;

        // we need Ceiling, because we can have (10 - 6) / 3 which should be treated as 2, not 1
        double EstimatedTimeOfArrival(int currentPosition, double currentSpeed) => (target - currentPosition) / currentSpeed;
    }
}

{
    // https://leetcode.com/problems/largest-rectangle-in-histogram/description/
    //var sol = new LargestRectangleInHistogram();
    //sol.LargestRectangleArea(new int[] { 2, 1, 5, 6, 2, 3 });
}

{
    // https://leetcode.com/problems/maximum-subarray-min-product/description/
    //var sol = new MaximumSubarrayMinProduct();
    //sol.MaxSumMinProduct(new int[] { 2, 3, 3, 1, 2 });
}

{
    // https://leetcode.com/problems/trapping-rain-water/description/
    //var sol = Trap(new int[] { 766, 576, 765 });
    int Trap(int[] height)
    {
        var result = 0;
        var size = height.Length;
        var monoStack = new Stack<int>(size);
        var nextGreater = new int[size];

        Array.Fill(nextGreater, -1);

        for (var i = 0; i < size; i++)
        {
            while (monoStack.Count > 0 && height[monoStack.Peek()] <= height[i])
            {
                var st = monoStack.Pop();
                nextGreater[st] = i;
            }

            // add previous greater, consider 766, 576, 765
            if (monoStack.Count > 0)
                nextGreater[monoStack.Peek()] = i;

            monoStack.Push(i);
        }

        // distance between two indexes should be at least 2
        for (int i = 0; i < nextGreater.Length; i++)
        {
            if (nextGreater[i] == -1)
                continue;

            if (nextGreater[i] - i < 2)
                continue;

            // choose min height of two heights
            var hgt = Math.Min(height[i], height[nextGreater[i]]);
            int left = i + 1, right = nextGreater[i] - 1;
            var sum = 0;

            while (left <= right)
            {
                var curHeight = hgt - height[left];
                sum += curHeight;
                left++;
            }

            if (sum <= 0)
                continue;

            result += sum;
            i = right; // skip already processed section
        }

        return result;
    }
}

{
    // https://leetcode.com/problems/minimum-cost-for-tickets/description/
    //var sol = MincostTickets(new[] { 1, 2, 3, 4, 6, 8, 9, 10, 13, 14, 16, 17, 19, 21, 24, 26, 27, 28, 29 }, new[] { 3, 14, 50 });
    int MincostTickets(int[] days, int[] costs)
    {
        // coin change
        var daysCount = days[^1];
        var dp = new int[daysCount + 1];
        Array.Fill(dp, int.MaxValue);

        dp[0] = 0;

        var currentDayIndex = 0;
        for (var i = 1; i <= daysCount; i++)
        {
            // skip unneeded days
            if (days[currentDayIndex] != i)
            {
                dp[i] = dp[i - 1];
                continue;
            }

            for (var j = 0; j < costs.Length; j++)
            {
                var cost = j switch
                {
                    0 => costs[0] + dp[Math.Clamp(i - 1, 0, dp.Length)],
                    1 => costs[1] + dp[Math.Clamp(i - 7, 0, dp.Length)],
                    2 => costs[2] + dp[Math.Clamp(i - 30, 0, dp.Length)],
                    _ => 0
                };

                dp[i] = Math.Min(dp[i], cost);
            }

            currentDayIndex++;
        }

        return dp[^1];
    }
}

{
    // https://leetcode.com/problems/longest-increasing-subsequence/description/
    //var sol = LengthOfLIS(new int[] { 1, 3, 6, 7, 9, 4, 10, 5, 6 });
    int LengthOfLIS(int[] nums)
    {
        var dp = new int[nums.Length];
        Array.Fill(dp, 1);

        for (int i = 0; i < nums.Length; i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (nums[i] <= nums[j])
                    continue;

                dp[i] = Math.Max(dp[i], dp[j] + 1);
            }
        }

        return dp.Max();
    }
}

{
    // https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/
    // Number of Longest Increasing Subsequence
    //var sol = FindNumberOfLIS(new int[] { 6, 5, 6, 5, 5, 2, 5, 1, 9, 4 });
    int FindNumberOfLIS(int[] nums)
    {
        var dp = new int[nums.Length];
        Array.Fill(dp, 1);

        // for each increasing sequence length (!) calculate their number of increasing sequences
        var count = new int[nums.Length];
        Array.Fill(count, 1);
        var max = 0;

        for (var i = 0; i < nums.Length; i++)
        {
            for (var j = 0; j < i; j++)
            {
                if (nums[i] <= nums[j])
                    continue;

                if (dp[j] + 1 > dp[i])
                {
                    dp[i] = dp[j] + 1;

                    // if j-th paths were 2, so out current i will also have 2 paths
                    count[i] = count[j];
                }

                // subsequence of same len
                else if (dp[j] + 1 == dp[i])
                    count[i] += count[j];
            }

            max = Math.Max(max, dp[i]);
        }

        var result = 0;
        for (int i = 0; i < nums.Length; i++)
        {
            if (dp[i] == max)
                result += count[i];
        }

        return result;
    }
}

{
    // https://leetcode.com/problems/increasing-triplet-subsequence/description/
    var sol = new IncreasingTripletSubsequence();
    //sol.IncreasingTriplet(new int[] { 2, 1, 5, 0, 4, 6 });
}

{
    string ClearDigits(string s)
    {
        // remove all digits
        // delete first digit and closest non-digit to its left
        var stack = new Stack<char>(s.Length);

        foreach (var ch in s)
        {
            if (char.IsLetter(ch))
            {
                stack.Push(ch);
            }
            else
            {
                if (char.IsLetter(stack.Peek()))
                    stack.Pop();
                else
                    stack.Push(ch);
            }
        }

        var result = new char[stack.Count];

        int index = stack.Count - 1;
        while (stack.Count > 0)
        {
            result[index] = stack.Pop();
            index--;
        }

        return result.Length == 0 ? "" : new string(result);
    }
}

{
    int FindWinningPlayer(int[] skills, int k)
    {
        var linkedList = new LinkedList<int>();
        var dict = new Dictionary<int, int>(skills.Length);
        var max = 0;

        for (int i = 0; i < skills.Length; i++)
        {
            var skill = skills[i];
            linkedList.AddLast(skill);
            dict.Add(skill, i);
            max = Math.Max(max, skill);
        }

        var currentWinStreak = 0;

        // using deque would simplify things
        while (currentWinStreak != k)
        {
            var firstPlayer = linkedList.First;
            var secondPlayer = linkedList.First.Next;

            if (firstPlayer.Value == max)
                return dict[firstPlayer.Value];

            if (firstPlayer.Value > secondPlayer.Value)
            {
                currentWinStreak++;
                linkedList.RemoveFirst();
                linkedList.RemoveFirst();

                linkedList.AddFirst(firstPlayer);
                linkedList.AddLast(secondPlayer);
            }
            else
            {
                currentWinStreak = 1;
                linkedList.RemoveFirst();
                linkedList.AddLast(firstPlayer);
            }
        }

        return dict[linkedList.First.Value];
    }
}

{
    // https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-i/description/
    var sol = new FindtheMaximumLengthofaGoodSubsequenceI();
    sol.MaximumLength(new int[] { 28, 28, 28 }, 0);
}

{
    var sol = FindLongestChain(new int[][] { new int[] { 1, 2 }, new int[] { 2, 3 }, new[] { 3, 4 } });
    // https://leetcode.com/problems/maximum-length-of-pair-chain/description/
    int FindLongestChain(int[][] pairs)
    {
        Array.Sort(pairs, (a, b) => a[1].CompareTo(b[1]));
        var previous = int.MinValue;
        var result = 0;

        foreach (var pair in pairs)
        {
            if (pair[0] <= previous)
                continue;

            previous = pair[1];
            result++;
        }

        return result;
    }
}

{
    var sol = NetworkDelayTime(new[] { new[] { 2, 1, 1 }, new[] { 2, 3, 1 }, new[] { 3, 4, 1 } }, 4, 2);
    int NetworkDelayTime(int[][] times, int n, int k)
    {
        // dijkstra's algorithm
        var adjacencyList = new Dictionary<int, List<(int, int)>>(n);

        // initialize adjacency list
        for (var i = 1; i <= n; i++)
        {
            adjacencyList.Add(i, new List<(int, int)>());
        }

        // populate adjacency list
        foreach (var time in times)
        {
            var from = time[0];
            var to = time[1];
            var weight = time[2];

            adjacencyList[from].Add((to, weight));
        }

        var source = k;
        var visited = new bool[n + 1];
        var distance = new int[n + 1];

        Array.Fill(distance, int.MaxValue);

        distance[0] = 0;
        distance[source] = 0;

        var queue = new Queue<int>(n);
        var pq = new PriorityQueue<int, int>(n);

        queue.Enqueue(source);

        while (queue.Count > 0)
        {
            var from = queue.Dequeue();

            // current is visited
            visited[from] = true;

            // analyze all edges of current node
            pq.EnqueueRange(adjacencyList[from]);

            while (pq.Count > 0)
            {
                pq.TryDequeue(out int to, out int w);

                // not processed distance or better distance
                if (distance[to] == int.MaxValue || distance[to] > distance[from] + w)
                    distance[to] = distance[from] + w;

                // new vertex found to process
                if (!visited[to])
                    queue.Enqueue(to);
            }
        }

        // if any distance is MaxValue, then not every node is reachable
        foreach (var d in distance)
        {
            if (d < int.MaxValue)
                continue;

            return -1;
        }

        return distance.Max();
    }
}

{
    // https://leetcode.com/problems/decode-string/description/
    //var sol = new DecodeStringSol();
    //sol.DecodeString("100[leetcode]");
}

{
    var quickSort = new QuickSort();
    quickSort.Sort(new int[] { 10, 16, 8, 12, 15, 6, 3, 9, 5 }, 0, 8);
}

{
    // invert binary tree
    TreeNode InvertTree(TreeNode root)
    {
        if (root is null)
            return null;

        var left = root.left;
        var right = root.right;

        root.left = InvertTree(right);
        root.right = InvertTree(left);
        return root;
    }
}

{
    // Binary Tree Level Order Traversal
    IList<IList<int>> LevelOrder(TreeNode root)
    {
        var result = new List<IList<int>>();

        if (root is null)
            return result;

        var q = new Queue<TreeNode>();
        q.Enqueue(root);

        while (q.Count > 0)
        {
            var count = q.Count;
            var list = new List<int>(count);

            for (var i = 0; i < count; i++)
            {
                var cur = q.Dequeue();

                if (cur.left is not null)
                    q.Enqueue(cur.left);

                if (cur.right is not null)
                    q.Enqueue(cur.right);

                list.Add(cur.val);
            }

            result.Add(list);
        }

        return result;
    }
}

{
    var one = new BinaryNode<int>(1);
    one.Left = new BinaryNode<int>(2);
    one.Right = new BinaryNode<int>(3);

    var two = new BinaryNode<int>(1);
    two.Left = new BinaryNode<int>(2);
    two.Right = new BinaryNode<int>(3);

    var three = new BinaryNode<int>(1);
    three.Left = new BinaryNode<int>(2);
    three.Left.Left = new BinaryNode<int>(3);

    //var sol = Compare(one, two);
    //var sol2 = Compare(one, three);
    //;

    // dfs preserves the shape of the tree
    bool Compare(BinaryNode<int> node1, BinaryNode<int> node2)
    {
        if (node1 is null && node2 is null)
            return true;

        if (node1 is null || node2 is null)
            return false;

        if (node1.Value != node2.Value)
            return false;

        return Compare(node1.Left, node2.Left) && Compare(node1.Right, node2.Right);
    }
}

{
    // https://leetcode.com/problems/design-linked-list/
    //var sol = new MyLinkedList();
    //sol.AddAtHead(2);
    //sol.Get(1);
}

{
    // https://leetcode.com/problems/design-browser-history/description/
    //var sol = new BrowserHistory("esgriv");
    //sol.Visit("cgrt");
    //sol.Visit("tip");
    //sol.Back(9);
    //sol.Visit("kttzxgh");
    //sol.Forward(7);
    //sol.Visit("cqge");
    //sol.Visit("yiigh");
    //sol.Forward(5);
    //sol.Visit("uun");
    //sol.Back(10);
    //sol.Visit("hci");
    //sol.Visit("whula");
    //sol.Forward(10);
}

{
    // https://leetcode.com/problems/maximum-gap/
    //var sol = new MaximumGapSol();
    //sol.MaximumGap(new int[] { 3, 6, 9, 1 });
}

{
    // https://leetcode.com/problems/design-circular-deque/description/
    //var sol = new MyCircularDeque(8);
    //sol.InsertFront(5);
    //sol.GetFront();
    //sol.IsEmpty();
    //sol.DeleteFront();
    //sol.InsertLast(3);
    //sol.GetRear();
    //sol.InsertLast(7);
    //sol.InsertFront(7);
    //sol.DeleteLast();
    //sol.InsertLast(4);
    //sol.IsEmpty();
}

{
    // https://leetcode.com/problems/number-of-provinces/description/
    //var sol = new NumberofProvinces();
    //sol.FindCircleNum(new int[][]
    //{
    //    new int[]{1, 1, 0},
    //    new int[]{1, 1, 0},
    //    new int[] {0, 0, 1}
    //});
}

{
    // https://leetcode.com/problems/ugly-number-ii/
    //var sol = new UglyNumber2();
    //sol.NthUglyNumber(10);
}

{
    //// https://leetcode.com/problems/find-k-pairs-with-smallest-sums/description/
    //var sol = new FindKPairswithSmallestSums();
    //sol.KSmallestPairs(new int[] { 1, 1, 2 }, new[] { 1, 2, 3 }, 2);
}

{
    //var sol = CanFinish(5, new[] { new[] { 1, 4 }, new[] { 2, 4 }, new[] { 3, 1 }, new[] { 3, 2 } });
    // course schedulez
    bool CanFinish(int numCourses, int[][] prerequisites)
    {
        // do topological sort using Kahn's algorithm
        // topological sort is only possible, if in the graph are no cycles, so DFS

        // create adjacency list
        var adjList = new Dictionary<int, List<int>>(numCourses);
        var inDegree = new int[numCourses];

        foreach (var prerequisite in prerequisites)
        {
            if (adjList.ContainsKey(prerequisite[0]))
                adjList[prerequisite[0]].Add(prerequisite[1]);
            else
                adjList.Add(prerequisite[0], new List<int>(numCourses) { prerequisite[1] });

            // increase in degree array
            inDegree[prerequisite[1]]++;
        }

        // kahn's
        var queue = new Queue<int>(numCourses);
        var visited = new HashSet<int>(numCourses);

        // add nodes with no incoming edges to the queue
        for (int i = 0; i < inDegree.Length; i++)
        {
            if (inDegree[i] != 0)
                continue;

            queue.Enqueue(i);
        }

        // remove nodes from queue and subtract affected nodes
        while (queue.Count > 0)
        {
            var node = queue.Dequeue();

            if (visited.Contains(node))
                return false;

            if (adjList.TryGetValue(node, out var nodes))
            {
                foreach (var nd in nodes)
                {
                    inDegree[nd]--;

                    if (inDegree[nd] == 0)
                        queue.Enqueue(nd);
                }
            }

            visited.Add(node);
        }

        return inDegree.All(a => a == 0);
    }
}

{
    // course schedule 2
    //var sol = FindOrder(3, new[] { new[] { 0, 2 }, new[] { 1, 2 }, new[] { 2, 0 }, });
    int[] FindOrder(int numCourses, int[][] prerequisites)
    {
        // do topological sort using Kahn's algorithm
        // topological sort is only possible, if in the graph are no cycles, so DFS

        // create adjacency list
        var adjList = new Dictionary<int, List<int>>(numCourses);
        var inDegree = new int[numCourses];

        foreach (var prerequisite in prerequisites)
        {
            if (adjList.ContainsKey(prerequisite[0]))
                adjList[prerequisite[0]].Add(prerequisite[1]);
            else
                adjList.Add(prerequisite[0], new List<int>(numCourses) { prerequisite[1] });

            // increase in degree array
            inDegree[prerequisite[1]]++;
        }

        // kahn's
        var queue = new Queue<int>(numCourses);
        var visited = new HashSet<int>(numCourses);
        var result = new Stack<int>(numCourses);

        // add nodes with no incoming edges to the queue
        for (int i = 0; i < inDegree.Length; i++)
        {
            if (inDegree[i] != 0)
                continue;

            queue.Enqueue(i);
        }

        // remove nodes from queue and subtract affected nodes
        while (queue.Count > 0)
        {
            var node = queue.Dequeue();

            if (visited.Contains(node))
                return Array.Empty<int>();

            if (adjList.TryGetValue(node, out var nodes))
            {
                foreach (var nd in nodes)
                {
                    inDegree[nd]--;

                    if (inDegree[nd] == 0)
                        queue.Enqueue(nd);
                }
            }

            visited.Add(node);
            result.Push(node);
        }

        return result.Count != numCourses ? Array.Empty<int>() : result.ToArray();
    }
}

{
    // min cost to connect all points
    var sol = MinCostConnectPoints(new int[][]
        { new int[] { 2, -3 }, new int[] { -17, -8 }, new int[] { 13, 8 }, new[] { -17,-15 }});

    int MinCostConnectPoints(int[][] points)
    {
        // kruskal
        // select minimal cost edges
        // and exclude it if it creates a cycle
        // create adj.list
        var parent = new Dictionary<int[], int[]>(1000);
        var ranks = new Dictionary<int[], int>(1000);

        foreach (var point in points)
        {
            parent.Add(point, point);
            ranks.Add(point, 1);
        }

        var pq = new PriorityQueue<(int[], int[]), int>(points.Length);

        // create all edges between points
        for (int i = 0; i < points.Length; i++)
        {
            for (int j = 0; j < points.Length; j++)
            {
                if (i == j)
                    continue;

                pq.Enqueue((points[i], points[j]), GetDistance(points[i], points[j]));
            }
        }

        var sum = 0;
        var addedEdges = 0;

        while (pq.Count > 0)
        {
            // nodes - 1 = edges to be MST
            if (addedEdges == points.Length - 1)
                break;

            var (from, to) = pq.Dequeue();

            if (!Union(from, to))
                continue;

            sum += GetDistance(from, to);
        }

        return sum;

        int[] Find(int[] x)
        {
            if (x == parent[x])
                return x;

            return parent[x] = Find(parent[x]);
        }

        bool Union(int[] x, int[] y)
        {
            var xp = Find(x);
            var yp = Find(y);

            if (xp == yp)
                return false;

            if (ranks[xp] > ranks[yp])
                parent[yp] = parent[xp];
            else if (ranks[yp] > ranks[xp])
                parent[xp] = parent[yp];
            else
            {
                ranks[xp]++;
                parent[yp] = xp;
            }

            return true;
        }

        int GetDistance(int[] a, int[] b) => Math.Abs(a[0] - b[0]) + Math.Abs(a[1] - b[1]);
    }
}

{
    // https://leetcode.com/problems/repeated-substring-pattern/description/
    //var sol = new RepeatedSubstringPattern();
    //sol.RepeatedSubstringPatternKMP("abacababacab");
}

{
    // https://leetcode.com/problems/climbing-stairs/description/
    int ClimbStairs(int n)
    {
        if (n == 1)
            return 1;

        if (n == 2)
            return 2;

        var previous = 1;
        var current = 2;

        var i = 2;
        while (i < n)
        {
            var temp = current;
            current += previous;
            previous = temp;
            i++;
        }

        return current;
    }
}

{
    // https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
    int MaxProfit(int[] prices)
    {
        var max = 0;
        var min = int.MaxValue;

        foreach (var price in prices)
        {
            max = Math.Max(max, price - min);
            min = Math.Min(min, price);
        }

        return max;
    }
}

{
    // https://leetcode.com/problems/min-cost-climbing-stairs/description/
    int MinCostClimbingStairs(int[] cost)
    {
        var dp = new int[cost.Length];
        dp[0] = cost[0];
        dp[1] = cost[1];

        for (int i = 2; i < cost.Length; i++)
        {
            dp[i] = Math.Min(dp[i - 2] + cost[i], dp[i - 1] + cost[i]);
        }

        return Math.Min(dp[^1], dp[^2]);
    }
}

{
    // https://leetcode.com/problems/divisor-game/description/
}

{
    // https://leetcode.com/problems/decode-ways/description/
    //var sol = NumDecodings("11106");
    int NumDecodings(string s)
    {
        if (s[0] == '0')
            return 0;

        var dp = new int[s.Length + 1];
        dp[0] = 1;
        dp[1] = 1;

        for (int i = 2; i <= s.Length; i++)
        {
            if (s[i - 1] != '0')
                dp[i] += dp[i - 1];

            if (s[i - 2] == '1' || (s[i - 2] == '2' && s[i - 1] <= '6'))
                dp[i] += dp[i - 2];
        }

        return dp[^1];
    }
}

{
    // https://leetcode.com/problems/unique-binary-search-trees/description/
    //var sol = NumTrees(4);

    int NumTrees(int n)
    {
        // formula
        // dp[3] = dp[0] * dp[2] + dp[1] * dp[1] + dp[2] * dp[0];

        var dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;

        for (int i = 2; i <= n; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }

        return dp[^1];
    }
}

{
    // https://leetcode.com/problems/house-robber/description/
    int Rob(int[] nums)
    {
        var n = nums.Length;
        var dp = new int[n + 2];

        for (int i = 0; i < n; i++)
        {
            // previous or prev-prev + current
            dp[i + 2] = Math.Max(dp[i + 1], dp[i] + nums[i]);
        }

        return dp[^1];
    }
}

{
    // https://leetcode.com/problems/perfect-squares/description/
    //var sol = NumSquares(25);
    int NumSquares(int n)
    {
        var count = (int) Math.Sqrt(n);
        var ps = new int[count];
        var dp = new int[n + 1];

        Array.Fill(dp, int.MaxValue);
        dp[0] = 1;

        // initialize perfect squares
        for (int i = 1; i <= count; i++)
        {
            ps[i - 1] = i * i;
            dp[i * i] = 1;
        }

        for (int i = 1; i <= n; i++)
        {
            foreach (var p in ps)
            {
                if (p > i)
                    break;

                dp[i] = Math.Min(dp[i], dp[i - p] + dp[p]);
            }
        }

        return dp[n];
    }
}

{
    // https://leetcode.com/problems/integer-break/
    var sol = new IntegerBreak();
    sol.IntegerBreakSol(5);
}

{
    // Best Time to Buy and Sell Stock with Cooldown
    var sol = MaxProfit(new int[] { 6, 1, 6, 4, 3, 0, 2 });
    int MaxProfit(int[] prices)
    {
        if (prices.Length == 1)
            return 0;

        var profit = new int[prices.Length];
        profit[0] = 0;
        profit[1] = Math.Max(0, prices[1] - prices[0]);
        var cooldown = Math.Max(-prices[0], -prices[1]);

        for (int i = 2; i < prices.Length; i++)
        {
            // if a sell day, consider the profit on previous day or cooldown with current day
            profit[i] = Math.Max(profit[i - 1], cooldown + prices[i]);
            cooldown = Math.Max(cooldown, profit[i - 2] - prices[i]);
        }

        return profit[^1];
    }
}

{
    // https://leetcode.com/problems/counting-bits/description/
}

{
    var sol = WiggleMaxLength(new int[] { 3, 3, 3, 2, 5 });
    int WiggleMaxLength(int[] nums)
    {
        if (nums.Length == 1)
            return 1;

        var result = 0;
        var prevDiff = nums[1] - nums[0];

        result = prevDiff != 0 ? 2 : 1;

        for (int i = 2; i < nums.Length; i++)
        {
            var curDiff = nums[i] - nums[i - 1];
            if (curDiff < 0 && prevDiff >= 0 ||
                curDiff > 0 && prevDiff <= 0)
            {
                result++;
                prevDiff = curDiff;
            }
        }

        return result;
    }
}

{
    // https://leetcode.com/problems/partition-equal-subset-sum/description/
    //var sol = CanPartition(new int[] { 1, 5, 11, 5 });

    bool CanPartition(int[] nums)
    {
        Array.Sort(nums);

        var sum = nums.Sum();

        if (sum % 2 == 1)
            return false;

        var target = sum / 2;

        var dp = new bool[sum + 1];
        dp[0] = true;

        foreach (var num in nums)
        {
            for (var j = target; j > 0; j--)
            {
                if (j < num)
                    continue;

                dp[j] = dp[j - num] || dp[j];
            }
        }

        return dp[sum];
        //var set = new HashSet<int>(nums.Length);

        //foreach (var num in nums)
        //{
        //    foreach (var n in set.ToArray())
        //    {
        //        set.Add(n + num);
        //    }

        //    set.Add(num);
        //}

        //return set.Contains(target);
    }
}

{
    var ig = new IgorAssignment();
    ig.Main();
}

{
    // https://leetcode.com/problems/maximum-length-of-pair-chain/description/
    //var sol = FindLongestChain(
    //    new int[][]
    //    {
    //        new [] {1, 2},
    //        new [] {2, 3},
    //        new [] {3,4 }
    //    });

    int FindLongestChain(int[][] pairs)
    {
        Array.Sort(pairs, (a, b) => a[1].CompareTo(b[1]));

        var result = 1;
        var dp = new int[pairs.Length];
        Array.Fill(dp, 1);

        for (int i = 1; i < pairs.Length; i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (pairs[i][0] <= pairs[j][1])
                    continue;

                dp[i] = dp[j] + 1;
                result = Math.Max(dp[i], result);
            }
        }

        return result;
    }
}

{
    // https://leetcode.com/problems/delete-and-earn/description/
    var sol = DeleteAndEarn(new int[] { 8, 3, 4, 7, 6, 6, 9, 2, 5, 8, 2, 4, 9, 5, 9, 1, 5, 7, 1, 4 });
    int DeleteAndEarn(int[] nums)
    {
        var freq = new Dictionary<int, int>(nums.Length);
        var max = 0;

        foreach (var num in nums)
        {
            if (freq.ContainsKey(num))
                freq[num] += num;
            else
                freq.Add(num, num);

            max = Math.Max(max, num);
        }

        var dp = new int[max + 1];
        var result = 0;

        foreach (var (key, value) in freq)
        {
            dp[key] = value;
        }

        for (int i = 2; i <= max; i++)
        {
            dp[i] = Math.Max(dp[i] + dp[i - 2], dp[i - 1]);
        }

        return dp[^1];
    }
}

{
    // https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/
    var sol = new BestTimetoBuyandSellStockwithTransaction_Fee();
    //sol.MaxProfit(new int[] { 1, 3, 2, 8, 4, 9 }, 2);
}

{
    // https://leetcode.com/problems/subarray-product-less-than-k/description/
    var sol = new SubarrayProductLessThanK();
    //sol.NumSubarrayProductLessThanK(new int[] { 10, 5, 2, 6 }, 100);
}

{
    // https://leetcode.com/problems/sliding-window-median/description/
    var sol = new SlidingWindowMedian();
    //sol.MedianSlidingWindow(new int[] { 1, 3, -1, -3, 5, 3, 6, 7 }, 3);
}

{
    // https://leetcode.com/problems/domino-and-tromino-tiling/description/
    var sol = new KnightDialer();
    //sol.KnightDialerSol(31);
}

{
    // https://leetcode.com/problems/minimum-cost-for-tickets/
    var sol = MincostTickets(new int[] { 1, 4, 6, 7, 8, 20 }, new[] { 7, 2, 15 });
    int MincostTickets(int[] days, int[] costs)
    {
        var lastDay = days[^1];
        var dp = new int[lastDay + 1];
        Array.Fill(dp, int.MaxValue);
        dp[0] = 0;

        var curDay = 0;
        for (var day = 1; day <= lastDay; day++)
        {
            if (day != days[curDay])
            {
                dp[day] = dp[day - 1];
                continue;
            }

            var value = int.MaxValue;
            value = Math.Min(value, costs[0] + dp[Math.Clamp(day - 1, 0, lastDay)]);
            value = Math.Min(value, costs[1] + dp[Math.Clamp(day - 7, 0, lastDay)]);
            value = Math.Min(value, costs[2] + dp[Math.Clamp(day - 30, 0, lastDay)]);

            dp[day] = value;
            curDay++;
        }

        return dp[lastDay];
    }
}

{
    // https://leetcode.com/problems/partition-array-for-maximum-sum/
    var sol = new PartitionArrayforMaximumSum();
    sol.MaxSumAfterPartitioning(new int[] { 1, 4, 1, 5, 7, 3, 6, 1, 9, 9, 3 }, 4);
}

{
    // https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/
    var sol = LongestSubsequence(new int[] { 1, 5, 7, 8, 5, 3, 4, 2, 1 }, -2);
    int LongestSubsequence(int[] arr, int difference)
    {
        var dict = new Dictionary<int, int>(arr.Length);
        var max = 1;

        foreach (var t in arr)
        {
            var key = t - difference;

            if (dict.ContainsKey(key))
            {
                if (!dict.TryAdd(t, dict[key] + 1))
                    dict[t] = Math.Max(dict[t], dict[key] + 1);

                max = Math.Max(max, dict[t]);
            }
            else
                dict.TryAdd(t, 1);
        }

        return max;
    }
}

{
    // https://leetcode.com/problems/greatest-sum-divisible-by-three/description/
    var sol = new GreatestSumDivisiblebyThree();
    //sol.MaxSumDivThree(new int[] { 1, 2, 3, 4, 4 });
}

{
    // https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/
    var sol = new BestTimetoBuyandSellStockIII();
    sol.MaxProfit(new int[] { 3, 3, 5, 0, 0, 3, 1, 4 });
}

{
    // https://leetcode.com/problems/maximum-profit-in-job-scheduling/description/
    var sol = new MaximumProfitinJobScheduling();
    //sol.JobScheduling(new[] { 1, 2, 3, 4, 6 }, new[] { 3, 5, 10, 6, 9 }, new[] { 20, 20, 100, 70, 60 });
    //sol.JobScheduling(new[] { 1, 2, 3, 3 }, new[] { 3, 4, 5, 6 }, new[] { 50, 10, 40, 70 });
    //sol.JobScheduling(new[] { 4, 2, 4, 8, 2 }, new[] { 5, 5, 5, 10, 8 }, new[] { 1, 2, 8, 10, 4 });
    //sol.JobScheduling(
    //    new[] { 33, 8, 9, 18, 16, 36, 18, 4, 42, 45, 29, 43 },
    //    new[] { 40, 16, 32, 39, 46, 43, 28, 13, 44, 46, 39, 44 },
    //    new[] { 2, 6, 5, 14, 5, 19, 5, 12, 19, 14, 14, 17 });
}

{
    //var sol = Rob(new[] { 1, 2, 1, 1 });
    // https://leetcode.com/problems/house-robber-ii/

    int Rob(int[] nums)
    {
        if (nums.Length == 1)
            return nums[0];

        // don't consider first, then don't consider last
        // rob from [0..n-2]
        // rob from [1..n-1]
        var dp = new int[nums.Length + 1];

        for (int i = 1; i < nums.Length; i++)
        {
            dp[i + 1] = Math.Max(dp[i], dp[i - 1] + nums[i]);
        }

        var first = dp[^1];
        Array.Clear(dp);

        for (int i = 0; i < nums.Length - 1; i++)
        {
            dp[i + 2] = Math.Max(dp[i + 1], dp[i] + nums[i]);
        }

        var second = dp[^1];
        return Math.Max(first, second);
    }
}

{
    // https://leetcode.com/problems/ones-and-zeroes/description/
    var sol = new OnesAndZeroes();
    sol.FindMaxForm(new[] { "10", "0001", "111001", "1", "0" }, 5, 3);
}

{
    // https://leetcode.com/problems/target-sum/
    var sol = FindTargetSumWays(new int[] { 1, 1, 1, 1, 1 }, 3);

    int FindTargetSumWays(int[] nums, int target)
    {
        var set = new List<int>(nums.Length * 2) { 0 };

        foreach (var num in nums)
        {
            var cur = set.ToArray();
            set.Clear();

            foreach (var i in cur)
            {
                set.Add(i + num);
                set.Add(i - num);
            }
        }

        return set.Count(i => i == target);
    }
}

{
    // https://leetcode.com/problems/shopping-offers/description/
    var sol = new ShoppingOffers();
    sol.ShoppingOffersSol(
        new List<int>() { 2, 5 },
        new List<IList<int>>()
        {
            new List<int>() { 3, 0, 5 },
            new List<int>() { 1, 2, 10 }
        },
        new List<int>() { 3, 2 });
}

{
    // https://leetcode.com/problems/2-keys-keyboard/
    var sol = new TwoKeysKeyboard();
    sol.MinSteps(10);
}

{
    // https://leetcode.com/problems/best-team-with-no-conflicts/description/
    var sol = new BestTeamWithNoConflicts();
    sol.BestTeamScore(new[] { 5, 4, 4, 6 }, new int[] { 1, 2, 2, 2 });
}

{
    // https://leetcode.com/problems/tallest-billboard/description/
    var sol = new TallestBillboard();
    //sol.TallestBillboardSol(new int[] { 1, 2, 3, 4, 5, 6 });
}

{
    // https://leetcode.com/problems/triangle/
    var sol = MinimumTotal(new List<IList<int>>()
    {
        new List<int>() { 2 }, new List<int>() { 3, 4 }, new List<int>() { 6, 5, 7 }, new List<int>() { 4, 1, 8, 3 }
    });

    int MinimumTotal(IList<IList<int>> triangle)
    {
        for (int i = 1; i < triangle.Count; i++)
        {
            for (int j = 0; j < triangle[i].Count; j++)
            {
                if (j == 0)
                {
                    triangle[i][0] += triangle[i - 1][0];
                }
                else if (j == triangle[i].Count - 1)
                {
                    triangle[i][^1] += triangle[i - 1][^1];
                }
                else
                {
                    triangle[i][j] += Math.Min(triangle[i - 1][j], triangle[i - 1][j - 1]);
                }
            }
        }

        return triangle[^1].Min();
    }
}

{
    // https://leetcode.com/problems/combination-sum-iv/description/

    int CombinationSum4(int[] nums, int target)
    {
        var dp = new int[target + 1];

        for (var i = 1; i <= target; i++)
        {
            foreach (var num in nums)
            {
                if (num > i)
                    continue;

                if (num == i)
                    dp[i]++;

                dp[i] += dp[i - num];
            }
        }

        return dp[target];
    }
}

{
    // https://leetcode.com/problems/out-of-boundary-paths/description/
    var sol = new OutOfBoundaryPaths();
    //sol.FindPaths(2, 2, 2, 0, 0);
}

{
    // https://leetcode.com/problems/valid-parenthesis-string/description/
    var sol = new ValidParenthesisString();
    //sol.CheckValidString("(*))");
}

{
    // https://leetcode.com/problems/reverse-nodes-in-k-group/
    var sol = new ReverseNodesInKGroups();
    //sol.ReverseKGroup(new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5))))), 3);
}

{
    // https://leetcode.com/problems/median-of-two-sorted-arrays/description/
    var sol = new MedianOfTwoSortedArrays();
    //sol.FindMedianSortedArrays(new int[] { 1 }, new[] { 2, 3 });
}

{
    // https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/description/
    var sol = new RemoveDuplicatesfromSortedArrayII();
    sol.RemoveDuplicates(new int[] { 0, 0, 1, 1, 1, 1, 2, 3, 3 });
}

{
    // https://leetcode.com/problems/rotate-array/description/
}

{
    // https://leetcode.com/problems/boats-to-save-people/description/
}

{
    var sol = new MinimumTimetoMakeRopeColorful();
    //sol.MinCost("aabaa", new[] { 1, 2, 3, 4, 1 });
}

{
    // https://leetcode.com/problems/find-k-closest-elements/description/
    var sol = new FindKClosestElements();
    //sol.FindClosestElements(new int[] { 0, 0, 0, 1, 3, 5, 6, 7, 8, 8 }, 2, 2);
}

{
    var sol = MaxSlidingWindow(new[] { 1, 3, -1, -3, 5, 3, 6, 7 }, 3);
    int[] MaxSlidingWindow(int[] nums, int k)
    {
        int left = 0, right = 0;
        var result = new List<int>(nums.Length - k + 1);
        var pq = new PriorityQueue<(int, int), int>(new MaxHeapComparer());

        while (right != k)
        {
            pq.Enqueue((nums[right], right), nums[right]);
            right++;
        }

        while (right <= nums.Length)
        {
            // if index is out-of-range, pop it and process next values
            while (pq.TryPeek(out var num, out _) && !IsInRange(num.Item2))
            {
                pq.Dequeue();
            }

            result.Add(pq.Peek().Item1);

            if (right == nums.Length)
                break;

            pq.Enqueue((nums[right], right), nums[right]);

            left++;
            right++;
        }

        return result.ToArray();

        bool IsInRange(int index) => index >= left;
    }
}

{
    // https://leetcode.com/problems/minimum-window-substring/
    //var sol = MinWindow("ADOBECODEBANC", "ABC");

    string MinWindow(string s, string t)
    {
        var dict = new Dictionary<char, int>(s.Length);
        var charsCount = t.Length;

        foreach (var character in t)
        {
            if (dict.ContainsKey(character))
                dict[character]++;
            else
                dict.Add(character, 1);
        }

        int left = 0, right = 0;
        var currentCount = 0;
        int minLength = s.Length + 1, minLeft = 0;

        while (right < s.Length)
        {
            if (dict.ContainsKey(s[right]))
            {
                dict[s[right]]--;

                if (dict[s[right]] >= 0)
                    currentCount++;

                while (currentCount == charsCount)
                {
                    // if a new minimum substring was found
                    if (right - left + 1 < minLength)
                    {
                        minLeft = left;
                        minLength = right - left + 1;
                    }

                    // start is slid to the next needed character encountered on the way
                    if (dict.ContainsKey(s[left]))
                    {
                        dict[s[left]]++;

                        // but if the removed needed character is a mandatory one, the while loop will stop
                        if (dict[s[left]] > 0)
                            currentCount--;
                    }

                    left++;
                }
            }

            right++;
        }

        return minLength > s.Length ? "" : s.Substring(minLeft, minLength);
    }
}

{
    // https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/description/
    var sol = new MinimumOperationstoReduceXtoZero();
    //sol.MinOperations(new int[] { 1, 1, 4, 2, 3 }, 5);
}

{
    // https://leetcode.com/problems/reconstruct-itinerary/description/
    var sol = FindItinerary(new List<IList<string>>()
    {
        new List<string>() { "JFK", "SFO" }, new List<string>() { "JFK", "ATL" },
        new List<string>() { "SFO", "ATL" }, new List<string>() { "ATL", "JFK" },
        new List<string>() { "ATL", "SFO" }
        //new List<string>() { "JFK", "KUL" }, new List<string>() { "JFK", "NRT" },
        //new List<string>() { "NRT", "JFK"}
    });
    IList<string> FindItinerary(IList<IList<string>> tickets)
    {
        // map will know the out degrees count, PQ the lexicographical order
        var map = new Dictionary<string, PriorityQueue<string, string>>(tickets.Count);

        foreach (var ticket in tickets)
        {
            if (!map.ContainsKey(ticket[0]))
                map.Add(ticket[0], new PriorityQueue<string, string>());

            map[ticket[0]].Enqueue(ticket[1], ticket[1]);
        }

        var result = new List<string>(map.Count);

        DFS("JFK");
        result.Reverse();
        return result;

        void DFS(string current)
        {
            while (map.ContainsKey(current) && map[current].Count > 0)
            {
                DFS(map[current].Dequeue());
            }

            result.Add(current);
        }
    }
}

{
    // https://leetcode.com/problems/subarray-sum-equals-k/description/
    var sol = new SubarraySumEqualsK();
    sol.SubarraySum(new int[] { -1, -1, 1 }, 0);
}

{
    // https://leetcode.com/problems/find-all-anagrams-in-a-string/description/
    var sol = new FindAllAnagramsinaString();
    //sol.FindAnagrams("", "");
}

{
    var sol = new ContinuousSubArraySum();
    //sol.CheckSubarraySum(new int[] { 23, 2, 6, 4, 7 }, 2);
}

{
    // https://leetcode.com/problems/non-decreasing-array/description/
    var sol = new NonDecreasingArray();
    sol.CheckPossibility(new int[] { 4, 2, 3 });
}

{
    // https://leetcode.com/problems/first-missing-positive/description/
    var sol = new FirstMissingPositive();
    sol.FirstMissingPositiveSol(new int[] { 3, 4, -1, 1 });
    //sol.FirstMissingPositiveSol(new int[] { 2, 2, 2 });
    //sol.FirstMissingPositiveSol(new int[]
    //    { -3, 9, 16, 4, 5, 16, -4, 9, 26, 2, 1, 19, -1, 25, 7, 22, 2, -7, 14, 2, 5, -6, 1, 17, 3, 24, -4, 17, 15 });
}

{
    // https://leetcode.com/problems/sort-characters-by-frequency/description/
}

{
    // https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/description/
    var sol = new MinimumRemoveToMakeValidParentheses();
    //sol.MinRemoveToMakeValid("lee(t(c)o)de)");
}

{
    // https://leetcode.com/problems/find-all-duplicates-in-an-array/description/
    var sol = new FindAllDuplicatesinanArray();
    //sol.FindDuplicates(new int[] { 10, 2, 5, 10, 9, 1, 1, 4, 3, 7 });
}

{
    var sol = new TextJustification();
    //sol.FullJustify(new string[] { "Listen", "to", "many,", "speak", "to", "a", "few." }, 6);
}

{
    // https://leetcode.com/problems/maximum-sum-circular-subarray/
    var sol = new MaximumSumCircularSubarray();
    //sol.MaxSubarraySumCircular(new int[] { 1, -1, 5, -2, 3, 2 });
}

{
    // https://leetcode.com/problems/longest-turbulent-subarray/description/
    var sol = new LongestTurbulentSubarray();
    //sol.MaxTurbulenceSize(new int[] { 2, 0, 2, 4, 2, 5, 0, 1, 2, 3 });
}

{
    // https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/description/
    var sol = new MaximumPointsYouCanObtainfromCards();
    //sol.MaxScore(new int[] { 1, 1000, 1 }, 1);
}

{
    // https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/description/
    var sol = new MinimumDeletionstoMakeCharacterFrequenciesUnique();
    //sol.MinDeletions("abcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwzabcdefghijklmnopqrstuvwxwz");
}

{
    var sol = new MinimizeMaximumofArray();
    //sol.MinimizeArrayValue(new int[] { 4, 7, 2, 2, 9, 19, 16, 0, 3, 15 });
}

{
    // https://leetcode.com/problems/two-city-scheduling/description/
    var sol = new TwoCityScheduling();
    //sol.TwoCitySchedCost(new int[][]
    //{
    //    new int[] { 259, 770 }, new[] { 448, 54 }, new[] { 926, 667 }, new[] { 184, 139 }, new[] { 840, 118 },
    //    new[] { 577, 469 }
    //});
}

{
    // https://leetcode.com/problems/furthest-building-you-can-reach/description/
    var sol = new FurthestBuildingYouCanReach();
    //sol.FurthestBuilding(new int[] { 4, 2, 7, 6, 9, 14, 12 }, 5, 1);
}

{
    // https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/description/
    var sol = new LeastNumberofUniqueIntegersafterKRemovals();
    //sol.FindLeastNumOfUniqueInts(new int[] { 4, 3, 1, 1, 3, 3, 2 }, 3);
}

{
    // https://leetcode.com/problems/car-pooling/description/
    var sol = new CarPooling();
    //sol.CarPoolingSol(new int[][] { new int[] { 2, 1, 5 }, new[] { 3, 3, 7 } }, 4);
}

{
    //var sol = getMaxInformationGain(new List<string>() { "aaaaaaaaaaaaa", "bbbbbbaabbbb" }, 2);
    static int getMaxInformationGain(List<string> dataSet, int max_common_features)
    {
        var result = 0; // max of Math.Abs(a - b) if not exceeding MCF

        var commonCharacters = new int[26];
        for (int i = 0; i < dataSet.Count; i++)
        {
            var cur = dataSet[i];

            foreach (var ch in cur)
            {
                commonCharacters[ch - 97]++;
            }

            var commonCharacters2 = new int[26];
            for (int j = i + 1; j < dataSet.Count; j++)
            {
                var cur2 = dataSet[j];
                var curFreq = 0;

                var len = Math.Abs(cur.Length - cur2.Length);

                if (len < result)
                    continue;

                foreach (var ch in cur2)
                {
                    // a match!
                    var freq = commonCharacters[ch - 97];

                    if (freq > 0)
                    {
                        commonCharacters2[ch - 97]++;

                        if (freq < commonCharacters2[ch - 97])
                            continue;

                        curFreq++;
                    }
                }

                Array.Clear(commonCharacters2);

                if (curFreq > max_common_features)
                    continue;

                result = Math.Max(result, len);
            }

            Array.Clear(commonCharacters);
        }

        return result;
    }

    static int getMinSize(List<int> gameSize, int k)
    {
        var minHeap = new PriorityQueue<int, (int, int)>(gameSize.Count);

        for (int i = 0; i < k; i++)
        {
            minHeap.Enqueue(gameSize[i], (gameSize[i], 1));
        }

        // if game size list is bigger, process remaining games greedily by assigning to smaller children
        for (int i = k; i < gameSize.Count; i++)
        {
            while (minHeap.TryPeek(out var _, out var priority) && priority.Item2 == 2)
            {
                minHeap.Dequeue();
            }

            var smallestGame = gameSize[i] + minHeap.Dequeue();
            minHeap.Enqueue(smallestGame, (smallestGame, 2));
        }

        var result = 0;

        while (minHeap.Count > 0)
        {
            result = Math.Max(result, minHeap.Dequeue());
        }

        return result;
    }
}

{
    // https://leetcode.com/problems/longest-happy-string/description/
    var sol = new LongestHappyString();
    //sol.LongestDiverseString(7, 1, 0);
}

{
    // https://leetcode.com/problems/maximum-subsequence-score/
    //var sol = new MaximumSubsequenceScore();
    //sol.MaxScore(new int[] { 4, 15, 3, 1, 1 }, new[] { 7, 5, 10, 9, 6 }, 3);
}

{
    // https://leetcode.com/problems/single-threaded-cpu/description/
    var sol = new SingleThreadedCPU();
    //sol.GetOrder(new int[][] { new[] { 8, 4 }, new[] { 5, 6 }, new[] { 2, 2 }, new[] { 7, 2 }, new[] { 10, 8 }, new[] { 2, 1 }, new[] { 5, 7 }, new[] { 8, 9 }, new[] { 2, 7 }, new[] { 3, 7 } });
}

{
    // https://leetcode.com/problems/maximum-performance-of-a-team/description/
    var sol = new MaximumPerformanceofaTeam();
    //sol.MaxPerformance(3, new[] { 2, 8, 2 }, new[] { 2, 7, 1 }, 2);
}

{
    // https://leetcode.com/problems/ipo/description/
    var sol = new IPO();
    //sol.FindMaximizedCapital(2, 0, new[] { 1, 2, 3 }, new[] { 0, 1, 1 });
    sol.FindMaximizedCapital(2, 0, new[] { 10, 20, 3 }, new[] { 0, 0, 1 });
}

{
    // https://leetcode.com/problems/minimum-cost-to-hire-k-workers/description/
    var sol = new MinimumCosttoHireKWorkers();
    //sol.MincostToHireWorkers(new int[] { 10, 2, 5 }, new[] { 70, 50, 30 }, 2);
}

{
    // https://leetcode.com/problems/find-peak-element/description/
    var sol = new FindPeakElement();
    //sol.FindPeakElementSol(new int[] { 3, 4, 3, 2, 1 });
}

{
    // https://leetcode.com/problems/successful-pairs-of-spells-and-potions/description/
    var sol = new SuccessfulPairsOfSpellAandPotions();
    //sol.SuccessfulPairs(new int[] { 15, 39, 38, 35, 33, 25, 31, 12, 40, 27, 29, 16, 22, 24, 7, 36, 29, 34, 24, 9, 11, 35, 21, 3, 33, 10, 9, 27, 35, 17, 14, 3, 35, 35, 39, 23, 35, 14, 31, 7 },
    //    new[] { 25, 19, 30, 37, 14, 30, 38, 22, 38, 38, 26, 33, 34, 23, 40, 28, 15, 29, 36, 39, 39, 37, 32, 38, 8, 17, 39, 20, 4, 39, 39, 7, 30, 35, 29, 23 },
    //    317);
}

{
    // https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
    var sol = new FindFirstAndLastPositionOfElementInSortedArray();
    //sol.SearchRange(new int[] { 5, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 10 }, 8);
}

{
    // https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/
    var sol = new MinimizeTheMaximumDifferenceOfPairs();
    //sol.MinimizeMax(new int[] { 10, 1, 2, 7, 1, 3 }, 3);
}

{
    int MinEatingSpeed(int[] piles, int h)
    {
        // binary search, search a range that can be completed
        int left = 1, right = piles[0];
        for (var i = 0; i < piles.Length; i++)
        {
            left = Math.Min(left, piles[i]);
            right = Math.Max(right, piles[i]);
        }

        while (left < right)
        {
            var mid = left + (right - left) / 2;

            if (CanEatBananas(mid, piles, h))
                right = mid;
            else
                left = mid + 1;
        }

        return left;
    }

    bool CanEatBananas(int amountOfBananas, int[] piles, int hours)
    {
        var count = 0;

        for (var i = 0; i < piles.Length; i++)
        {
            count += (int) Math.Ceiling((double) piles[i] / amountOfBananas);
        }

        return count <= hours;
    }
}

{
    // https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/
    var sol = ShipWithinDays(new int[] { 1, 2, 3, 1, 1 }, 4);

    int ShipWithinDays(int[] weights, int days)
    {
        int left = weights.Max(), right = weights.Sum();

        while (left < right)
        {
            var mid = left + (right - left) / 2;

            if (CanShip(mid, weights, days))
                right = mid;
            else
                left = mid + 1;
        }

        return left;
    }

    bool CanShip(int packages, int[] weights, int days)
    {
        var count = 1; // start from 1, because count the last package that will not be considered in the loop
        var currentPackages = 0;

        foreach (var weight in weights)
        {
            if (currentPackages + weight > packages)
            {
                count++;
                currentPackages = 0;
            }

            currentPackages += weight;
        }

        return count <= days;
    }
}

{
    // https://leetcode.com/problems/split-array-largest-sum/
    var sol = new SplitArrayLargestSum();
    //sol.SplitArray(new int[] { 1, 2, 3, 4, 5 }, 1);
}

{
    // https://leetcode.com/problems/find-in-mountain-array/description/
}

{
    // https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/description/
    var sol = new NumberOfSubsequencesThatSatisfyTheGivenSumCondition();
    //sol.NumSubseq(new int[] { 3, 3, 6, 8 }, 12);
}

{
    // https://leetcode.com/problems/k-th-symbol-in-grammar/description/
    var sol = new KthSymbolInGrammar();
    //sol.KthGrammar(4, 6);
}

{
    // https://leetcode.com/problems/rearrange-array-elements-by-sign/description/
    var sol = new RearrangeArrayElementsBySign();
    sol.RearrangeArray(new int[] { 3, 1, -2, -5, 2, -4 });
}