namespace Sandbox.Solutions.Medium;

/*
   [[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16],[9,18],[10,20],[11,22],[12,24],[13,26],[14,28],[15,30],[16,32],[17,34],[18,36],[19,38],[20,40],[21,42],[22,44],[23,46],[24,48],[25,50],[26,52],[27,54],[28,56],[29,58],[30,60],[31,62],[32,64],[33,66],[34,68],[35,70],[36,72],[37,74],[38,76],[39,78],[40,80],[41,82],[42,84],[43,86],[44,88],[45,90],[46,92],[47,94],[48,96],[49,98],[50,100],[1,2],[2,4],[3,6],[4,8],[5,10],[6,12],[7,14],[8,16],[9,18],[10,20],[11,22],[12,24],[13,26],[14,28],[15,30],[16,32],[17,34],[18,36],[19,38],[20,40],[21,42],[22,44],[23,46],[24,48],[25,50],[26,52],[27,54],[28,56],[29,58],[30,60],[31,62],[32,64],[33,66],[34,68],[35,70],[36,72],[37,74],[38,76],[39,78],[40,80],[41,82],[42,84],[43,86],[44,88],[45,90],[46,92],[47,94],[48,96],[49,98],[50,100]]
   100
   [[1,3],[2,6],[3,9],[4,12],[5,15],[6,18],[7,21],[8,24],[9,27],[10,30],[11,33],[12,36],[13,39],[14,42],[15,45],[16,48],[17,51],[18,54],[19,57],[20,60],[21,63],[22,66],[23,69],[24,72],[25,75],[26,78],[27,81],[28,84],[29,87],[30,90],[31,93],[32,96],[33,99],[34,102],[35,105],[36,108],[37,111],[38,114],[39,117],[40,120],[41,123],[42,126],[43,129],[44,132],[45,135],[46,138],[47,141],[48,144],[49,147],[50,150],[1,3],[2,6],[3,9],[4,12],[5,15],[6,18],[7,21],[8,24],[9,27],[10,30],[11,33],[12,36],[13,39],[14,42],[15,45],[16,48],[17,51],[18,54],[19,57],[20,60],[21,63],[22,66],[23,69],[24,72],[25,75],[26,78],[27,81],[28,84],[29,87],[30,90],[31,93],[32,96],[33,99],[34,102],[35,105],[36,108],[37,111],[38,114],[39,117],[40,120],[41,123],[42,126],[43,129],[44,132],[45,135],[46,138],[47,141],[48,144],[49,147],[50,150]]
   200
 */
public class FillingBookcaseShelves
{
    public int MinHeightShelves(int[][] books, int shelfWidth)
    {
        // books[i] = [thickness, height]
        // we must keep the order as they appear in books
        // return min height required

        var dp = new int[books.Length + 1];

        // 1. start placing books one by one, always use a new shelf to begin with
        // 2. after you stored the new height value, start looking back at previous books one by one, and see while the width
        // permits, how many books can fit on this new level
        // 3. check to see if bringing said books down reduced the overall height, if yes, update the new lowest height value at dp array

        for (var i = 1; i <= books.Length; i++)
        {
            var book = books[i - 1];

            var width = book[0];
            var height = book[1];

            dp[i] = dp[i - 1] + height;

            for (var j = i - 1; j > 0; j--)
            {
                if (width + books[j - 1][0] > shelfWidth)
                    break;

                height = Math.Max(height, books[j - 1][1]);
                width += books[j - 1][0];
                dp[i] = Math.Min(dp[i], dp[j - 1] + height);
            }
        }

        return dp[^1];
    }
}